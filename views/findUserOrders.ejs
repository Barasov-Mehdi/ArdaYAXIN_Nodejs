<!DOCTYPE html>
<html lang="az">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sifarişlərə Bax / Sil</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* General Styles */
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            --light-bg: #f8f9fa;
            --dark-bg: #343a40;
            --text-color: #333;
            --white-color: #fff;
            --border-color: #dee2e6;
            --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--light-bg);
            color: var(--text-color);
            line-height: 1.6;
        }

        /* Header (Optional, if you want a consistent header across pages) */
        /*
        header {
            background-color: var(--dark-bg);
            color: var(--white-color);
            padding: 1rem 0;
            text-align: center;
            box-shadow: var(--card-shadow);
        }

        header h1 {
            margin: 0;
            font-size: 2.2rem;
            color: var(--primary-color);
        }

        header nav ul {
            list-style: none;
            padding: 0;
            margin: 1rem 0 0 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1.5rem;
        }

        header nav ul li a {
            color: var(--white-color);
            text-decoration: none;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        header nav ul li a:hover,
        header nav ul li a.active {
            background-color: var(--primary-color);
            color: var(--white-color);
        }
        */

        .container {
            max-width: 900px;
            margin: 40px auto;
            background: var(--white-color);
            padding: 30px;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
        }

        h1,
        h2 {
            color: var(--primary-color);
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.2rem;
        }

        .search-container {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap; /* Allow wrapping on small screens */
        }

        .search-container input[type="text"] {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            box-sizing: border-box;
        }

        .search-container button {
            padding: 12px 20px;
            background-color: var(--primary-color);
            color: var(--white-color);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .search-container button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        .order-list {
            list-style: none;
            padding: 0;
        }

        .order-item {
            background: var(--light-bg);
            border: 1px solid var(--border-color);
            margin-bottom: 15px;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .order-info {
            margin-bottom: 8px;
        }

        .order-info strong {
            color: var(--text-color);
            min-width: 120px; /* Align labels */
            display: inline-block;
        }

        .order-info span {
            color: var(--secondary-color);
            font-size: 0.95em;
        }

        .delete-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            background-color: var(--danger-color);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s ease, transform 0.2s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .delete-btn:hover {
            background-color: #c82333;
            transform: translateY(-1px);
        }

        .message {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-weight: 500;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .message.info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        #noOrdersFound {
            text-align: center;
            color: var(--secondary-color);
            margin-top: 20px;
            font-style: italic;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .container {
                margin: 20px auto;
                padding: 20px;
            }

            h1, h2 {
                font-size: 1.8rem;
                margin-bottom: 20px;
            }

            .search-container {
                flex-direction: column;
                gap: 15px;
            }

            .search-container button {
                width: 100%;
                justify-content: center;
            }

            .order-item {
                padding: 15px;
            }

            .order-info strong {
                min-width: 90px;
            }

            .delete-btn {
                position: static; /* Stack on smaller screens */
                margin-top: 15px;
                width: auto;
                align-self: flex-end; /* Align to the right if space allows */
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 15px;
            }

            h1, h2 {
                font-size: 1.5rem;
            }

            .search-container input,
            .search-container button {
                font-size: 0.95rem;
                padding: 10px;
            }

            .delete-btn {
                font-size: 0.8em;
                padding: 6px 10px;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <h1><i class="fas fa-search"></i> İstifadəçi Sifarişlərini Axtar</h1>

        <div class="search-container">
            <input type="text" id="userNameInput" placeholder="Axtarmaq istədiyiniz İstifadəçi Adını daxil edin">
            <button onclick="searchOrders()"><i class="fas fa-filter"></i> Digər Sifarişləri Göstər</button>
            <button onclick="fetchAllOrders()" class="secondary-button"><i class="fas fa-list-alt"></i> Bütün Sifarişləri Göstər</button>
        </div>

        <div id="messageContainer" class="message" style="display: none;"></div>

        <h2><i class="fas fa-clipboard-list"></i> Tapılan Sifarişlər</h2>
        <ul id="orderList" class="order-list">
            <p id="noOrdersFound" style="display: none;">Bu istifadəçi xaricində heç bir sifariş tapılmadı.</p>
        </ul>
    </div>

    <script>
        function showMessage(type, text) {
            const messageContainer = document.getElementById('messageContainer');
            messageContainer.textContent = text;
            messageContainer.className = `message ${type}`;
            messageContainer.style.display = 'block';
            setTimeout(() => {
                messageContainer.style.display = 'none';
            }, 5000); // Hide after 5 seconds
        }

        async function fetchAllOrders() {
            const orderList = document.getElementById('orderList');
            const noOrdersFound = document.getElementById('noOrdersFound');
            orderList.innerHTML = '';
            noOrdersFound.style.display = 'none';
            document.getElementById('userNameInput').value = ''; // Clear the input when showing all orders

            try {
                const response = await fetch('/api/taxis/allRequests'); // This endpoint needs to exist on your backend
                if (!response.ok) {
                    const errorData = await response.json();
                    showMessage('error', errorData.message || 'Bütün sifarişlər gətirilərkən xəta baş verdi.');
                    return;
                }

                const orders = await response.json();
                displayOrders(orders, 'Bütün sifarişlər uğurla yükləndi.');
            } catch (error) {
                showMessage('error', 'Bütün sifarişlər gətirilərkən şəbəkə xətası baş verdi.');
                console.error('Error fetching all orders:', error);
            }
        }

        async function searchOrders() {
            const userName = document.getElementById('userNameInput').value.trim();
            const orderList = document.getElementById('orderList');
            const noOrdersFound = document.getElementById('noOrdersFound');

            orderList.innerHTML = ''; // Clear previous results
            noOrdersFound.style.display = 'none'; // Hide "No orders found" message

            if (!userName) {
                showMessage('info', 'Lütfən axtarış üçün bir istifadəçi adı daxil edin.');
                return;
            }

            try {
                // Step 1: Find the user(s) by name to get their IDs
                const userResponse = await fetch(`/api/users/by-name?name=${encodeURIComponent(userName)}`);
                if (!userResponse.ok) {
                    const errorData = await userResponse.json();
                    showMessage('error', errorData.message || 'İstifadəçi(lər) tapılarkən xəta baş verdi.');
                    return;
                }
                const users = await userResponse.json();

                if (users.length === 0) {
                    noOrdersFound.textContent = 'Bu adla heç bir istifadəçi tapılmadı.';
                    noOrdersFound.style.display = 'block';
                    showMessage('info', 'Bu adla heç bir istifadəçi tapılmadı.');
                    return;
                }

                const userIdsToExclude = users.map(user => user._id);

                // Step 2: Fetch all orders *excluding* those from the found user IDs
                // IMPORTANT: You need a backend API endpoint that supports this.
                // For example: GET /api/taxis/orders/exclude?userIds=id1,id2,id3
                const excludeUrl = `/api/taxis/orders/exclude?userIds=${userIdsToExclude.join(',')}`;
                const ordersResponse = await fetch(excludeUrl);

                if (!ordersResponse.ok) {
                    const errorData = await ordersResponse.json();
                    showMessage('error', errorData.message || 'Sifarişlər gətirilərkən xəta baş verdi.');
                    return;
                }

                const orders = await ordersResponse.json();
                displayOrders(orders, `"${userName}" istifadəçisi xaricində ${orders.length} sifariş tapıldı.`);

            } catch (error) {
                showMessage('error', 'Sifarişlər axtarılarkən xəta baş verdi.');
                console.error('Error searching orders:', error);
            }
        }

        function displayOrders(orders, successMessage) {
            const orderList = document.getElementById('orderList');
            const noOrdersFound = document.getElementById('noOrdersFound');

            orderList.innerHTML = ''; // Clear previous results

            if (orders.length > 0) {
                orders.forEach(order => {
                    const listItem = document.createElement('li');
                    listItem.className = 'order-item';
                    listItem.setAttribute('data-id', order._id);

                    // Determine user name for display (from order.userId if available, or 'N/A')
                    const orderUserName = order.user && order.user.name ? order.user.name : 'N/A'; // Assuming order.user.name exists
                    const currentAddress = order.currentAddress ? order.currentAddress.text : 'Təyin olunmayıb';
                    const destinationAddress = order.destinationAddress ? order.destinationAddress.text : 'Təyin olunmayıb';
                    const price = order.price != null ? `${parseFloat(order.price).toFixed(2)} ₼` : 'Təyin olunmayıb';
                    const driverInfo = order.driverDetails ? `${order.driverDetails.firstName} (${order.driverDetails.carPlate})` : 'Təyin olunmayıb';

                    const status = [];
                    if (order.isTaken) status.push('Qəbul edildi');
                    if (order.isFinished) status.push('Bitdi');
                    if (order.isConfirmed) status.push('Təsdiqləndi');
                    const statusText = status.length > 0 ? status.join(' - ') : 'Gözləmədə';

                    listItem.innerHTML = `
                        <div class="order-info"><strong>İstifadəçi Adı:</strong> <span>${orderUserName}</span></div>
                        <div class="order-info"><strong>Hardan:</strong> <span>${currentAddress}</span></div>
                        <div class="order-info"><strong>Hara:</strong> <span>${destinationAddress}</span></div>
                        <div class="order-info"><strong>Qiymət:</strong> <span>${price}</span></div>
                        <div class="order-info"><strong>Status:</strong> <span>${statusText}</span></div>
                        <div class="order-info"><strong>Sifariş ID:</strong> <span>${order._id}</span></div>
                        <div class="order-info"><strong>Sürücü:</strong> <span>${driverInfo}</span></div>
                        <div class="order-info"><strong>Tarix:</strong> <span>${new Date(order.createdAt).toLocaleString()}</span></div>
                        <button class="delete-btn" onclick="deleteOrder('${order._id}')"><i class="fas fa-trash-alt"></i> Sil</button>
                    `;
                    orderList.appendChild(listItem);
                });
                showMessage('success', successMessage);
                noOrdersFound.style.display = 'none'; // Hide if orders are found
            } else {
                noOrdersFound.style.display = 'block';
                showMessage('info', 'Heç bir sifariş tapılmadı.');
            }
        }

        async function deleteOrder(orderId) {
            if (!confirm('Bu sifarişi silmək istədiyinizə əminsiniz? Bu əməliyyat geri qaytarıla bilməz.')) {
                return;
            }

            try {
                const response = await fetch('/api/taxis/request', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        requestId: orderId
                    })
                });

                if (response.ok) {
                    showMessage('success', 'Sifariş uğurla silindi!');
                    const listItem = document.querySelector(`.order-item[data-id="${orderId}"]`);
                    if (listItem) {
                        listItem.remove();
                    }
                    // Re-evaluate if "no orders found" message should be shown after deletion
                    if (document.getElementById('orderList').children.length === 0) {
                        document.getElementById('noOrdersFound').style.display = 'block';
                    }
                } else {
                    const errorData = await response.json();
                    showMessage('error', errorData.message || 'Sifariş silinərkən xəta baş verdi.');
                }
            } catch (error) {
                showMessage('error', 'Sifariş silinərkən şəbəkə xətası baş verdi.');
                console.error('Error deleting order:', error);
            }
        }

        // Fetch all orders on page load
        document.addEventListener('DOMContentLoaded', fetchAllOrders);
    </script>
</body>

</html>