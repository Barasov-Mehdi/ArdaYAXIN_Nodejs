<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find User Orders</title>
    <link rel="stylesheet" href="/assets/style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: #fff;
            padding: 20px 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            color: #0056b3;
            text-align: center;
            margin-bottom: 20px;
        }
        .search-container {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            gap: 10px; /* Space between input and button */
        }
        .search-container input[type="text"] {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        .search-container button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .search-container button:hover {
            background-color: #0056b3;
        }
        .order-list {
            list-style: none;
            padding: 0;
        }
        .order-item {
            background: #f9f9f9;
            border: 1px solid #e1e1e1;
            margin-bottom: 10px;
            padding: 15px;
            border-radius: 5px;
            display: flex;
            flex-direction: column;
            position: relative; /* For positioning the delete button */
        }
        .order-info {
            margin-bottom: 5px;
        }
        .order-info strong {
            color: #333;
        }
        .order-info span {
            color: #666;
            font-size: 0.95em;
        }
        .delete-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 0.85em;
            transition: background-color 0.2s ease;
        }
        .delete-btn:hover {
            background-color: #c82333;
        }
        .message {
            margin-top: 20px;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
        }
        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .message.info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Find User Orders</h1>

        <div class="search-container">
            <input type="text" id="userNameInput" placeholder="Enter User Name">
            <button onclick="searchOrders()">Search Orders</button>
        </div>

        <div id="messageContainer" class="message" style="display: none;"></div>

        <h2>Orders Found</h2>
        <ul id="orderList" class="order-list">
            <p id="noOrdersFound" style="display: none; text-align: center; color: #777;">No orders found for this user.</p>
        </ul>
    </div>

    <script>
        function showMessage(type, text) {
            const messageContainer = document.getElementById('messageContainer');
            messageContainer.textContent = text;
            messageContainer.className = `message ${type}`;
            messageContainer.style.display = 'block';
            setTimeout(() => {
                messageContainer.style.display = 'none';
            }, 5000); // Hide after 5 seconds
        }

        async function searchOrders() {
            const userName = document.getElementById('userNameInput').value.trim();
            const orderList = document.getElementById('orderList');
            const noOrdersFound = document.getElementById('noOrdersFound');

            orderList.innerHTML = ''; // Clear previous results
            noOrdersFound.style.display = 'none'; // Hide "No orders found" message

            if (!userName) {
                showMessage('info', 'Please enter a user name to search.');
                return;
            }

            try {
                // First, find the user(s) by name
                const userResponse = await fetch(`/api/users/by-name?name=${encodeURIComponent(userName)}`);
                if (!userResponse.ok) {
                    const errorData = await userResponse.json();
                    showMessage('error', errorData.message || 'Error finding user(s).');
                    return;
                }
                const users = await userResponse.json();

                if (users.length === 0) {
                    noOrdersFound.style.display = 'block';
                    showMessage('info', 'No user found with that name.');
                    return;
                }

                let allOrders = [];
                for (const user of users) {
                    // Then, fetch orders for each found user
                    const orderResponse = await fetch(`/api/taxis/userRequests/${user._id}`);
                    if (orderResponse.ok) {
                        const userOrders = await orderResponse.json();
                        if (userOrders.length > 0) {
                             allOrders = allOrders.concat(userOrders.map(order => ({ ...order, userName: user.name })));
                        }
                    } else if (orderResponse.status === 404) {
                        console.log(`No orders found for user ${user.name} (ID: ${user._id})`);
                    } else {
                        const errorData = await orderResponse.json();
                        showMessage('error', errorData.message || `Error fetching orders for user ${user.name}.`);
                    }
                }

                if (allOrders.length > 0) {
                    allOrders.forEach(order => {
                        const listItem = document.createElement('li');
                        listItem.className = 'order-item';
                        // Add data-id attribute for easy removal
                        listItem.setAttribute('data-id', order._id); 
                        listItem.innerHTML = `
                            <div class="order-info"><strong>User Name:</strong> <span>${order.userName || 'N/A'}</span></div>
                            <div class="order-info"><strong>From:</strong> <span>${order.currentAddress ? order.currentAddress.text : 'N/A'}</span></div>
                            <div class="order-info"><strong>To:</strong> <span>${order.destinationAddress ? order.destinationAddress.text : 'N/A'}</span></div>
                            <div class="order-info"><strong>Price:</strong> <span>${order.price || 'N/A'} â‚¼</span></div>
                            <div class="order-info"><strong>Status:</strong> <span>
                                ${order.isTaken ? 'Taken' : 'Pending'} 
                                ${order.isFinished ? ' - Finished' : ''} 
                                ${order.isConfirmed ? ' - Confirmed' : ''}
                            </span></div>
                            <div class="order-info"><strong>Order ID:</strong> <span>${order._id}</span></div>
                            <div class="order-info"><strong>Driver:</strong> <span>${order.driverDetails ? `${order.driverDetails.firstName} (${order.driverDetails.carPlate})` : 'N/A'}</span></div>
                            <div class="order-info"><strong>Requested At:</strong> <span>${new Date(order.createdAt).toLocaleString()}</span></div>
                            <button class="delete-btn" onclick="deleteOrder('${order._id}')">Delete</button>
                        `;
                        orderList.appendChild(listItem);
                    });
                    showMessage('success', `${allOrders.length} orders found for "${userName}".`);
                } else {
                    noOrdersFound.style.display = 'block';
                    showMessage('info', 'No orders found for the specified user name.');
                }

            } catch (error) {
                showMessage('error', 'An error occurred while searching for orders.');
                console.error('Error searching orders:', error);
            }
        }

        async function deleteOrder(orderId) {
            if (!confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
                return; // User cancelled the deletion
            }

            try {
                const response = await fetch('/api/taxis/request', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ requestId: orderId })
                });

                if (response.ok) {
                    showMessage('success', 'Order deleted successfully!');
                    // Remove the deleted order from the DOM
                    const listItem = document.querySelector(`.order-item[data-id="${orderId}"]`);
                    if (listItem) {
                        listItem.remove();
                    }
                } else {
                    const errorData = await response.json();
                    showMessage('error', errorData.message || 'Failed to delete order.');
                }
            } catch (error) {
                showMessage('error', 'An error occurred while trying to delete the order.');
                console.error('Error deleting order:', error);
            }
        }
    </script>
</body>
</html>