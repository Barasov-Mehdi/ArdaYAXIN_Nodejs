<!DOCTYPE html>
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taksi Sifariş Paneli</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Genel Değişkenler ve Sıfırlamalar */
        :root {
            --dark-bg: #1A1A2E;
            --card-bg: #16213E;
            --primary-color: #0F3460;
            --accent-color: #E94560;
            --text-light: #E0E0E0;
            --text-dark: #FFFFFF;
            --border-color: #0A1931;
            --success-color: #00BF63;
            --warning-color: #FFC107;
            --danger-color: #DC3545;
            --info-color: #17A2B8;
            --button-hover: #E03554;
            --shadow-light: 0 4px 10px rgba(0, 0, 0, 0.2);
            --shadow-dark: 0 6px 15px rgba(0, 0, 0, 0.4);
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--dark-bg);
            color: var(--text-light);
            line-height: 1.6;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 40px 20px;
            box-sizing: border-box;
        }

        /* Ana Konteyner */
        .container {
            display: flex;

            /* Küçük ekranlarda alt alta düşsün */
            gap: 30px;
            /* Daha geniş bir görünüm için */
            width: 90%;
            margin: auto;
        }

        /* Sol ve Sağ Panel Stilleri */
        .orderContaine,
        .getOrderContainer {
            flex: 1;
            min-width: 300px;
            /* Her iki panelin de minimum genişliği */
            background-color: var(--card-bg);
            padding: 35px;
            border-radius: 15px;
            box-shadow: var(--shadow-dark);
            border: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
        }

        .orderContaine {
            order: 2;
            /* Küçük ekranlarda sipariş formunun altta kalması için */
        }

        .getOrderContainer {
            order: 1;
            /* Küçük ekranlarda sipariş listesinin üstte kalması için */
        }

        /* Başlıklar */
        h1 {
            font-size: 28px;
            margin-bottom: 25px;
            color: var(--accent-color);
            text-align: center;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        /* Form Elemanları */
        form {
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        label {
            margin-bottom: 5px;
            font-weight: 600;
            color: var(--text-light);
            display: block;
            /* Label'ların kendi satırında olması için */
        }

        input[type="text"],
        input[type="number"],
        textarea {
            padding: 12px 15px;
            border-radius: 8px;
            border: 1px solid var(--primary-color);
            background-color: var(--dark-bg);
            color: var(--text-dark);
            width: 100%;
            box-sizing: border-box;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        input[type="text"]:focus,
        input[type="number"]:focus,
        textarea:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(233, 69, 96, 0.3);
            outline: none;
        }

        textarea {
            resize: vertical;
            min-height: 90px;
        }

        button {
            padding: 14px 20px;
            border: none;
            border-radius: 8px;
            background-color: var(--accent-color);
            color: var(--text-dark);
            font-weight: 700;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        button:hover {
            background-color: var(--button-hover);
            transform: translateY(-2px);
        }

        .secondary-button {
            background-color: var(--primary-color);
            color: var(--text-light);
        }

        .secondary-button:hover {
            background-color: #0D2B4A;
        }


        /* Adres Arama Sonuçları */
        .address-input-container {
            position: relative;
        }

        .address-search-results {
            list-style-type: none;
            margin: 4px 0 0;
            padding: 0;
            background-color: var(--dark-bg);
            border: 1px solid var(--accent-color);
            border-radius: 8px;
            max-height: 180px;
            overflow-y: auto;
            position: absolute;
            width: 100%;
            z-index: 1000;
            box-shadow: var(--shadow-light);
        }

        .address-search-results li {
            padding: 10px 15px;
            cursor: pointer;
            color: var(--text-light);
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            transition: background-color 0.2s ease;
        }

        .address-search-results li:last-child {
            border-bottom: none;
        }

        .address-search-results li:hover {
            background-color: var(--primary-color);
            color: var(--text-dark);
        }

        /* Mesaj Kutusu */
        #message {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-weight: 500;
            box-shadow: var(--shadow-light);
        }

        #message.error {
            background-color: var(--danger-color);
            color: var(--text-dark);
        }

        #message.success {
            background-color: var(--success-color);
            color: var(--text-dark);
        }

        #message.info {
            background-color: var(--info-color);
            color: var(--text-dark);
        }

        /* Sipariş Listesi Konteyneri */
        #ordersContainer {
            margin-top: 25px;
            max-height: 550px;
            /* Sabit yükseklik ve scroll */
            overflow-y: auto;
            padding-right: 10px;
            /* Scrollbar için boşluk */
        }

        /* Scrollbar Stilleri */
        #ordersContainer::-webkit-scrollbar {
            width: 10px;
        }

        #ordersContainer::-webkit-scrollbar-track {
            background: var(--dark-bg);
            border-radius: 10px;
        }

        #ordersContainer::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 10px;
        }

        #ordersContainer::-webkit-scrollbar-thumb:hover {
            background: var(--accent-color);
        }


        /* Tekil Sipariş Kartı */
        .siparis {
            border: 1px solid var(--primary-color);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: var(--dark-bg);
            color: var(--text-light);
            box-shadow: var(--shadow-light);
            transition: transform 0.2s ease;
        }

        .siparis:hover {
            transform: translateY(-5px);
            border-color: var(--accent-color);
        }

        .siparis p {
            margin: 8px 0;
            font-size: 0.95rem;
        }

        .siparis strong {
            color: var(--text-dark);
            min-width: 100px;
            /* Labels align */
            display: inline-block;
        }

        /* Durum Gösterge Kutuları */
        .status-indicators {
            display: flex;
            justify-content: start;
            align-items: center;
            gap: 15px;
            margin-top: 15px;
            margin-bottom: 20px;
        }

        .status-box {
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 600;
        }

        .status-circle {
            width: 22px;
            height: 22px;
            border-radius: 50%;
            border: 2px solid var(--text-dark);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-dark);
            font-size: 0.7em;
        }

        .atAdresActive {
            background-color: var(--success-color);
        }

        .atAdresNotActive {
            background-color: var(--danger-color);
        }

        .takedCustumor {
            background-color: var(--success-color);
        }

        .takedCustumorNot {
            background-color: var(--danger-color);
        }

        /* Sipariş İşlem Butonları */
        .buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding-top: 15px;
        }

        .buttons button {
            flex: 1;
            min-width: 100px;
            /* Butonların minimum genişliği */
            padding: 10px 15px;
            font-size: 0.9rem;
            font-weight: 600;
            border-radius: 6px;
            transition: background-color 0.3s ease;
        }

        .sil {
            background-color: var(--danger-color);
        }

        .sil:hover {
            background-color: #bb2d3b;
        }

        .durum {
            background-color: var(--warning-color);
            color: var(--dark-bg);
        }

        .durum:hover {
            background-color: #e0a800;
        }

        .confirm {
            background-color: var(--info-color);
        }

        .confirm:hover {
            background-color: #117a8b;
        }

        .finish-order {
            background-color: var(--success-color);
            color: var(--dark-bg);
        }

        .finish-order:hover {
            background-color: #218838;
        }

        /* Link Stilleri */
        .top-link {
            display: block;
            background-color: var(--primary-color);
            color: var(--text-dark);
            padding: 12px 0;
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 25px;
            transition: background-color 0.3s ease;
        }

        .ustunde {
            color: var(--info-color);
            font-weight: 700;
            margin-bottom: 10px;
            text-align: center;
            width: 100%;
        }

        .top-link:hover {
            background-color: var(--accent-color);
        }

        .ustundebox {
            background-color: var(--card-bg);
            padding: 5px 10px;
            border-radius: 8px;
            box-shadow: var(--shadow-light);
            border: 1px solid white;
            z-index: 1000;
            margin: 10px 0; 
        }

        /* Media Queries - Responsive Tasarım */
        @media (max-width: 992px) {
            .container {
                flex-direction: column-reverse;
                align-items: center;
            }

            .orderContaine,
            .getOrderContainer {
                width: 95%;
                /* Daha dar ekranlarda tam genişlik */
                margin: 0;
            }

            .orderContaine {
                order: 1;
                /* Form küçük ekranlarda üstte olsun */
            }

            .getOrderContainer {
                order: 2;
                /* Sipariş listesi altta olsun */
            }

            h1 {
                font-size: 24px;
            }

            .buttons button {
                width: 100%;
                flex-basis: auto;
                /* Düğmelerin satır sonuna kadar genişlemesini sağlar */
            }
        }

        @media (max-width: 576px) {
            body {
                padding: 20px 10px;
            }

            .orderContaine,
            .getOrderContainer {
                padding: 20px;
                border-radius: 10px;
            }

            h1 {
                font-size: 20px;
                margin-bottom: 20px;
            }

            input[type="text"],
            input[type="number"],
            textarea,
            button {
                font-size: 0.9rem;
                padding: 10px 12px;
            }

            .address-search-results li {
                padding: 8px 10px;
                font-size: 0.9rem;
            }

            .siparis {
                padding: 15px;
                font-size: 0.9rem;
            }

            .siparis p {
                margin: 6px 0;
            }

            .status-circle {
                width: 18px;
                height: 18px;
            }
        }
    </style>
</head>

<body>
    <div class="container">

        <div class="getOrderContainer">
            <h1><i class="fas fa-clipboard-check"></i> Sifarişləri Yoxla</h1>
            <form id="searchForm">
                <input type="text" value="680208c697715af83884bf47" id="searchUserId"
                    placeholder="İstifadəçi ID'sini daxil edin" required />
                <button type="submit"><i class="fas fa-sync-alt"></i> Sifarişləri Yüklə</button>
            </form>

            <div id="ordersContainer"></div>
        </div>

        <div class="orderContaine">
            <a href="/find-user-orders" class="top-link">
                <i class="fas fa-search"></i> Sifariş Axtar
            </a>

            <h1 id="mainTitle"><i class="fas fa-taxi"></i> Taksi Sifarişi Ver</h1>
            <div id="orderFormSection">
                <form id="taxiOrderForm">
                    <div class="address-input-container">
                        <label for="currentAddressText">Müştəri ünvanı:</label>
                        <input type="text" id="currentAddressText" name="currentAddressText"
                            placeholder="Müştəri ünvanını daxil edin" required>
                        <input type="hidden" id="currentAddressLatitude" name="currentAddressLatitude">
                        <input type="hidden" id="currentAddressLongitude" name="currentAddressLongitude">
                        <ul class="address-search-results" id="currentAddressResults"></ul>
                    </div>
                    <div class="address-input-container">
                        <label for="destinationAddressText">Gediləcək ünvan:</label>
                        <input type="text" id="destinationAddressText" name="destinationAddressText"
                            placeholder="Gediləcək ünvanı daxil edin" required>
                        <input type="hidden" id="destinationAddressLatitude" name="destinationAddressLatitude">
                        <input type="hidden" id="destinationAddressLongitude" name="destinationAddressLongitude">
                        <ul class="address-search-results" id="destinationAddressResults"></ul>
                    </div>

                    <div class="address-input-container">
                        <label for="destination2Text">İkinci gediləcək ünvan (istəyə bağlı):</label>
                        <input type="text" id="destination2Text" name="destination2Text"
                            placeholder="İkinci ünvanı daxil edin">
                        <input type="hidden" id="destination2Latitude" name="destination2Latitude">
                        <input type="hidden" id="destination2Longitude" name="destination2Longitude">
                        <ul class="address-search-results" id="destination2Results"></ul>
                    </div>

                    <div>
                        <label for="price">Qiymət (₼):</label>
                        <input type="number" id="price" name="price" step="0.01" placeholder="Qiyməti daxil edin"
                            required>
                    </div>

                    <div>
                        <label for="tel">Telefon Nömrəsi:</label>
                        <input type="text" id="tel" value="0703733355" name="tel"
                            placeholder="Telefon nömrəsini daxil edin" required>
                    </div>

                    <div>
                        <label for="additionalInfo">Əlavə məlumat (istəyə bağlı):</label>
                        <textarea id="additionalInfo" name="additionalInfo"
                            placeholder="Əlavə məlumatları buraya yazın"></textarea>
                    </div>

                    <div>
                        <label for="userId">İstifadəçi ID:</label>
                        <input type="text" id="userId" name="userId" value="680208c697715af83884bf47" readonly>
                    </div>

                    <button type="submit"><i class="fas fa-paper-plane"></i> Sifariş Ver</button>
                </form>
                <div id="message" style="display: none;"></div>
            </div>
        </div>


    </div>

    <script>
        const mainTitle = document.getElementById('mainTitle');
        const orderFormSection = document.getElementById('orderFormSection');
        const messageDiv = document.getElementById('message');

        const currentAddressInput = document.getElementById('currentAddressText');
        const currentAddressLatitudeInput = document.getElementById('currentAddressLatitude');
        const currentAddressLongitudeInput = document.getElementById('currentAddressLongitude');
        const currentAddressResultsList = document.getElementById('currentAddressResults');

        const destinationAddressInput = document.getElementById('destinationAddressText');
        const destinationAddressLatitudeInput = document.getElementById('destinationAddressLatitude');
        const destinationAddressLongitudeInput = document.getElementById('destinationAddressLongitude');
        const destinationAddressResultsList = document.getElementById('destinationAddressResults');

        const destination2Input = document.getElementById('destination2Text');
        const destination2LatitudeInput = document.getElementById('destination2Latitude');
        const destination2LongitudeInput = document.getElementById('destination2Longitude');
        const destination2ResultsList = document.getElementById('destination2Results');

        const telInput = document.getElementById('tel');
        const additionalInfoTextarea = document.getElementById('additionalInfo');
        const userIdInput = document.getElementById('userId'); // Added this for the order placement form

        let allCoordinates = [];
        let currentOrders = {}; // Store orders by their _id to easily access and update

        function showMessage(type, text) {
            messageDiv.textContent = text;
            messageDiv.className = `message ${type}`;
            messageDiv.style.display = 'block';
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 5000); // Hide after 5 seconds
        }

        async function fetchAllCoordinates() {
            try {
                const response = await fetch('/api/coordinates');
                if (response.ok) {
                    allCoordinates = await response.json();
                } else {
                    showMessage('error', 'Koordinatlar yüklənərkən xəta baş verdi.');
                    console.error('Error loading coordinates:', await response.text());
                }
            } catch (error) {
                showMessage('error', 'Koordinatlar gətirilərkən şəbəkə xətası baş verdi.');
                console.error('Network error loading coordinates:', error);
            }
        }

        function filterAndDisplayResults(inputEl, resultsListEl, latEl, lonEl) {
            const term = inputEl.value.toLowerCase();
            resultsListEl.innerHTML = '';
            if (term.length < 2) {
                resultsListEl.style.display = 'none';
                return;
            }

            const filtered = allCoordinates.filter(c => c.addressName.toLowerCase().includes(term));
            if (filtered.length > 0) {
                filtered.forEach(c => {
                    const li = document.createElement('li');
                    li.textContent = c.addressName;
                    li.onclick = () => {
                        inputEl.value = c.addressName;
                        latEl.value = c.latitude;
                        lonEl.value = c.longitude;
                        resultsListEl.style.display = 'none';
                    };
                    resultsListEl.appendChild(li);
                });
                resultsListEl.style.display = 'block';
            } else {
                resultsListEl.style.display = 'none';
            }
        }

        currentAddressInput.addEventListener('input', () =>
            filterAndDisplayResults(currentAddressInput, currentAddressResultsList, currentAddressLatitudeInput, currentAddressLongitudeInput)
        );

        destinationAddressInput.addEventListener('input', () =>
            filterAndDisplayResults(destinationAddressInput, destinationAddressResultsList, destinationAddressLatitudeInput, destinationAddressLongitudeInput)
        );

        destination2Input.addEventListener('input', () =>
            filterAndDisplayResults(destination2Input, destination2ResultsList, destination2LatitudeInput, destination2LongitudeInput)
        );

        document.addEventListener('click', (e) => {
            if (!e.target.closest('.address-input-container')) {
                currentAddressResultsList.style.display = 'none';
                destinationAddressResultsList.style.display = 'none';
                destination2ResultsList.style.display = 'none';
            }
        });

        document.getElementById('taxiOrderForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            if (
                !currentAddressInput.value || !currentAddressLatitudeInput.value || !currentAddressLongitudeInput.value ||
                !destinationAddressInput.value || !destinationAddressLatitudeInput.value || !destinationAddressLongitudeInput.value ||
                !telInput.value || !document.getElementById('price').value || !userIdInput.value
            ) {
                showMessage('error', 'Lütfən bütün tələb olunan sahələri doldurun.');
                return;
            }

            const data = {
                currentAddress: {
                    text: currentAddressInput.value,
                    latitude: parseFloat(currentAddressLatitudeInput.value),
                    longitude: parseFloat(currentAddressLongitudeInput.value)
                },
                destinationAddress: {
                    text: destinationAddressInput.value,
                    latitude: parseFloat(destinationAddressLatitudeInput.value),
                    longitude: parseFloat(destinationAddressLongitudeInput.value)
                },
                destination2: null,
                price: parseFloat(document.getElementById('price').value),
                userId: userIdInput.value,
                tel: telInput.value,
                additionalInfo: additionalInfoTextarea.value
            };

            if (destination2Input.value && destination2LatitudeInput.value && destination2LongitudeInput.value) {
                data.destination2 = {
                    text: destination2Input.value,
                    latitude: parseFloat(destination2LatitudeInput.value),
                    longitude: parseFloat(destination2LongitudeInput.value)
                };
            }

            try {
                const response = await fetch('/api/taxis/request', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                const result = await response.json();

                if (response.ok && result.requestId) {
                    showMessage('success', 'Sifariş uğurla yerləşdirildi!');
                    // Clear form
                    currentAddressInput.value = "";
                    currentAddressLatitudeInput.value = "";
                    currentAddressLongitudeInput.value = "";
                    destinationAddressText.value = "";
                    destinationAddressLatitudeInput.value = "";
                    destinationAddressLongitudeInput.value = "";
                    destination2Text.value = "";
                    destination2LatitudeInput.value = "";
                    destination2LongitudeInput.value = "";
                    document.getElementById('price').value = "";
                    additionalInfo.value = "";
                    fetchOrders(); // Call fetchOrders directly
                } else {
                    showMessage('error', 'Xəta: ' + (result.message || 'Sifariş yerləşdirilə bilmədi.'));
                }
            } catch (e) {
                showMessage('error', 'Sunucu xətası: Sifariş yerləşdirilərkən problem yaşandı.');
                console.error(e);
            }
        });

        fetchAllCoordinates();

        // bu zorudu

        function renderOrderCard(order) {
            const ordersContainer = document.getElementById('ordersContainer');
            let orderCard = document.getElementById(`order-card-${order._id}`);

            if (order.isFinished) {
                if (orderCard) {
                    ordersContainer.removeChild(orderCard);
                }
                delete currentOrders[order._id];
                return;
            }

            const atAddressBox = order.atAddress ?
                '<div class="status-circle atAdresActive"><i class="fas fa-check"></i></div>' :
                '<div class="status-circle atAdresNotActive"><i class="fas fa-times"></i></div>';
            const takedCustumorBox = order.takenCustomer ?
                '<div class="status-circle takedCustumor"><i class="fas fa-check"></i></div>' :
                '<div class="status-circle takedCustumorNot"><i class="fas fa-times"></i></div>';

            if (order.atAddress && !window.playedSoundOrders.has(order._id)) {
                const audio = new Audio('/assets/successfully-done-complete-sound-6-SBA-300462024-preview.mp3');
                audio.play().catch((e) => console.warn("Ses otomatik oynatılamadı (atAddress):", e));
                window.playedSoundOrders.add(order._id);
            }
            if (order.takenCustomer && !window.playedSoundOrders.has(`${order._id}_takenCustomer_sound`)) {
                const audio = new Audio('/assets/elgun_ses.mp3');
                audio.play().catch((e) => console.warn("Ses otomatik oynatılamadı (takenCustomer):", e));
                window.playedSoundOrders.add(`${order._id}_takenCustomer_sound`);
            }

            // Kartın HTML yapısı
            const orderHtml = `
        <p class="surucuBasta"><strong>Müştəri:</strong> ${order.currentAddress.text}</p>
        <p><strong>Təyinat 1:</strong> ${order.destinationAddress.text}</p>
        <p><strong>Təyinat 2:</strong> ${order.destination2 && order.destination2.text ? order.destination2.text : 'Yoxdur'}</p>
        <p class="price"><strong>Qiymət:</strong> ${order.price != null ? order.price.toFixed(2) + ' ₼' : 'Müəyyən deyil'}</p>
        <p><strong>Telefon:</strong> ${order.tel || 'Yoxdur'}</p>

        <div class="status-indicators">
            <div class="status-box">${atAddressBox}<span>Ünvanda</span></div>
            <div class="status-box">${takedCustumorBox}<span>Müştəri Alındı</span></div>
        </div>
        <div class="buttons">
            <button class="sil" onclick="sil('${order._id}')"><i class="fas fa-times-circle"></i> Ləğv Et</button>
            <button class="finish-order" onclick="finishOrder('${order._id}', ${order.price})"><i class="fas fa-flag-checkered"></i> Bitir</button>
        </div>
    `;

            if (orderCard) {
                // Var olan kartı güncelle
                orderCard.innerHTML = orderHtml;
            } else {
                // Yeni kart oluştur
                orderCard = document.createElement('div');
                orderCard.className = 'siparis';
                orderCard.id = `order-card-${order._id}`;
                orderCard.innerHTML = orderHtml;
                ordersContainer.appendChild(orderCard);
            }

            // Eğer driverDetails boşsa ama driverId varsa, API'den sürücü bilgisi getir ve fiyatın altına ekle
            if ((!order.driverDetails || Object.keys(order.driverDetails).length === 0) && order.driverId) {
                fetch(`/api/drivers/ideslesensofor/${order.driverId}`)
                    .then(res => res.json())
                    .then(driver => {
                        if (driver && driver.firstName) {
                            const priceElement = orderCard.querySelector('.price');
                            const driverHtml = `
                        <div class="dynamic-driver ustundebox">
                            <p class="ustunde"><strong>${driver.firstName} ${driver.lastName}'in Üstündə</strong></p>
                        </div>
                    `;
                            if (priceElement) {
                                priceElement.insertAdjacentHTML('afterend', driverHtml);
                            } else {
                                orderCard.insertAdjacentHTML('beforeend', driverHtml);
                            }
                        }
                    })
                    .catch(err => console.error('Sürücü məlumatı gətirilərkən xəta:', err));
            } else if (order.driverDetails && Object.keys(order.driverDetails).length > 0) {
                // Eğer driverDetails zaten varsa, onları da göster
                const priceElement = orderCard.querySelector('.price');
                const driverHtml = `
            <div class="dynamic-driver">
                <p><strong>Sürücü Adı:</strong> ${order.driverDetails.firstName || 'Bilinmir'}</p>
                <p><strong>Maşın No:</strong> ${order.driverDetails.carPlate || 'Bilinmir'}</p>
                <p><strong>Müddət:</strong> ${order.time != null ? order.time + ' Dəqiqə' : 'Bilinmir'}</p>
            </div>
        `;
                if (priceElement) {
                    priceElement.insertAdjacentHTML('afterend', driverHtml);
                } else {
                    orderCard.insertAdjacentHTML('beforeend', driverHtml);
                }
            }

            currentOrders[order._id] = order;
        }

        async function fetchOrders() {
            const userId = document.getElementById('searchUserId').value;
            const ordersContainer = document.getElementById('ordersContainer');

            if (!userId) {
                ordersContainer.innerHTML = '<p style="text-align:center; color: var(--text-light);">Lütfən bir İstifadəçi ID-si daxil edin.</p>';
                return;
            }

            try {
                const response = await fetch(`/api/taxis/get-user-orders?userId=${userId}`);
                const newOrders = await response.json();

                if (response.status !== 200 || newOrders.length === 0) {
                    ordersContainer.innerHTML = '<p style="text-align:center; color: var(--text-light);">Bu istifadəçiyə aid aktiv sifarişlər tapılmadı.</p>';
                    currentOrders = {}; // Clear cache
                    return;
                }

                if (!window.playedSoundOrders) {
                    window.playedSoundOrders = new Set();
                }

                const newOrderIds = new Set(newOrders.map(order => order._id));
                const ordersToRemove = Object.keys(currentOrders).filter(orderId => !newOrderIds.has(orderId));

                ordersToRemove.forEach(orderId => {
                    const orderCard = document.getElementById(`order-card-${orderId}`);
                    if (orderCard) {
                        ordersContainer.removeChild(orderCard);
                    }
                    delete currentOrders[orderId];
                });

                newOrders.forEach(order => {
                    renderOrderCard(order);
                });

            } catch (error) {
                ordersContainer.innerHTML = '<p style="text-align:center; color: var(--danger-color);">Sifarişləri gətirərkən xəta baş verdi.</p>';
                console.error('Error fetching orders:', error);
            }
        }

        document.getElementById('searchForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            if (window.ordersRefreshInterval) {
                clearInterval(window.ordersRefreshInterval);
            }
            await fetchOrders();
            window.ordersRefreshInterval = setInterval(fetchOrders, 4500);
        });

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('searchForm').dispatchEvent(new Event('submit'));
        });

        async function sil(orderId) {
            if (!confirm('Bu sifarişi ləğv etmək istədiyinizə əminsiniz?')) return;

            try {
                const response = await fetch('/api/taxis/cancel-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ requestId: orderId })
                });

                const data = await response.json();
                console.log('Cancel response:', data); // <-- buradan driverReleased bax
                if (response.ok) {
                    showMessage('success', 'Sifariş ləğv edildi.');
                    fetchOrders();
                } else {
                    showMessage('error', data.message || 'Ləğv etmə uğursuz oldu.');
                }
            } catch (err) {
                showMessage('error', 'Şəbəkə xətası.');
                console.error('Error cancelling order:', err);
            }
        }

        async function yenile(orderId) {
            if (!confirm('Bu sifarişi obşiyə (ümumi siyahıya) atmaq istədiyinizə əminsiniz?')) {
                return;
            }
            try {
                const response = await fetch('/api/taxis/reassign-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ requestId: orderId })
                });

                if (response.ok) {
                    showMessage('success', 'Sifariş obşiyə atıldı.');
                    fetchOrders(); // Refresh list
                } else {
                    const errorData = await response.json();
                    showMessage('error', errorData.message || 'Obşiyə atma uğursuz oldu.');
                }
            } catch (error) {
                showMessage('error', 'Obşiyə atma zamanı şəbəkə xətası baş verdi.');
                console.error('Error reassigning order:', error);
            }
        }

        async function finishOrder(orderId, price) {
            if (!confirm('Bu sifarişi bitirmək istədiyinizə əminsiniz? Sürücünün limitindən 15% çıxılacaq.')) {
                return;
            }
            try {
                const response = await fetch('/api/drivers/finish-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ requestId: orderId, price: price })
                });

                if (response.ok) {
                    showMessage('success', 'Sifariş tamamlandı və sürücünün limitindən 15% çıxıldı.');
                    fetchOrders(); // Refresh list
                } else {
                    const errorData = await response.json();
                    showMessage('error', errorData.message || 'Sifarişi tamamlama uğursuz oldu.');
                    console.error('Finish order error:', errorData);
                }
            } catch (error) {
                showMessage('error', 'Sifarişi tamamlama zamanı şəbəkə xətası baş verdi.');
                console.error('Network error finishing order:', error);
            }
        }
    </script>
</body>

</html>
