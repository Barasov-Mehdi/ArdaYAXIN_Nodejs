<!DOCTYPE html>
<html lang="az">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arda Taksi Admin Paneli</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* General Styles */
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            --light-bg: #f8f9fa;
            --dark-bg: #343a40;
            --text-color: #333;
            --white-color: #fff;
            --border-color: #dee2e6;
            --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--light-bg);
            color: var(--text-color);
            line-height: 1.6;
        }

        /* Header */
        header {
            background-color: var(--dark-bg);
            color: var(--white-color);
            padding: 1rem 0;
            text-align: center;
            box-shadow: var(--card-shadow);
        }

        header h1 {
            margin: 0;
            font-size: 2.2rem;
            color: var(--primary-color);
        }

        header nav ul {
            list-style: none;
            padding: 0;
            margin: 1rem 0 0 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1.5rem;
        }

        header nav ul li a {
            color: var(--white-color);
            text-decoration: none;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        header nav ul li a:hover,
        header nav ul li a.active {
            background-color: var(--primary-color);
            color: var(--white-color);
        }

        /* Main Content Layout */
        .flex-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 2rem;
            padding: 2rem;
            max-width: 1200px;
            margin: 2rem auto;
            background-color: var(--white-color);
            border-radius: 10px;
            box-shadow: var(--card-shadow);
        }

        .container {
            background-color: var(--white-color);
            padding: 2rem;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
            flex: 1;
            min-width: 300px;
            max-width: 500px;
        }

        .container h3,
        .container h2 {
            color: var(--primary-color);
            margin-top: 0;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 0.8rem;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
        }

        /* Form Elements */
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--secondary-color);
        }

        select,
        input[type="number"],
        input[type="text"],
        textarea {
            width: 100%;
            padding: 12px;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 1rem;
            box-sizing: border-box;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        select:focus,
        input[type="number"]:focus,
        input[type="text"]:focus,
        textarea:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
            outline: none;
        }

        /* Buttons */
        button {
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        button.primary {
            background-color: var(--primary-color);
            color: var(--white-color);
        }

        button.primary:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        button.secondary {
            background-color: var(--secondary-color);
            color: var(--white-color);
        }

        button.secondary:hover {
            background-color: #5a6268;
            transform: translateY(-2px);
        }

        /* Balance Controls */
        .balance-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 1.5rem;
        }

        .balance-controls button {
            flex-shrink: 0;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            font-size: 1.5rem;
            font-weight: bold;
            background-color: var(--primary-color);
            color: var(--white-color);
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .balance-controls button:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }

        .balance-controls button:active {
            transform: scale(0.95);
        }

        .balance-controls input[type="number"] {
            flex-grow: 1;
            text-align: center;
            margin-bottom: 0; /* Override default margin */
        }

        /* Driver Table */
        .driver-list table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1.5rem;
            font-size: 0.95rem;
        }

        .driver-list th,
        .driver-list td {
            border: 1px solid var(--border-color);
            padding: 12px 15px;
            text-align: left;
        }

        .driver-list th {
            background-color: var(--primary-color);
            color: var(--white-color);
            font-weight: 600;
            text-transform: uppercase;
        }

        .driver-list tr:nth-child(even) {
            background-color: var(--light-bg);
        }

        .driver-list tr:hover {
            background-color: #e9ecef;
            cursor: pointer;
        }

        .driver-list .status-text.green {
            color: var(--success-color);
            font-weight: 600;
        }

        .driver-list .status-text.red {
            color: var(--danger-color);
            font-weight: 600;
        }

        /* Utility Classes */
        .text-success {
            color: var(--success-color);
        }

        .text-danger {
            color: var(--danger-color);
        }

        .hidden {
            display: none !important;
        }

        .message {
            padding: 1rem;
            margin-top: 1rem;
            border-radius: 5px;
            font-weight: 500;
            text-align: center;
        }

        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Footer */
        footer {
            background-color: var(--dark-bg);
            color: var(--white-color);
            text-align: center;
            padding: 1.5rem 0;
            margin-top: 3rem;
            font-size: 0.9rem;
            box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.1);
        }

        footer a {
            color: var(--primary-color);
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            header nav ul {
                flex-direction: column;
                gap: 0.8rem;
            }

            .flex-container {
                flex-direction: column;
                padding: 1rem;
                margin: 1rem auto;
            }

            .container {
                min-width: unset;
                max-width: 100%;
                padding: 1.5rem;
            }

            .balance-controls button {
                width: 35px;
                height: 35px;
                font-size: 1.3rem;
            }

            .driver-list th,
            .driver-list td {
                padding: 10px;
                font-size: 0.85rem;
            }
        }

        @media (max-width: 480px) {
            header h1 {
                font-size: 1.8rem;
            }

            header nav ul li a {
                padding: 0.4rem 0.8rem;
                font-size: 0.9rem;
            }

            .container h3, .container h2 {
                font-size: 1.5rem;
            }

            button {
                padding: 10px 15px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>

<body>
    <header>
        <h1>Arda Taksi</h1>
        <nav>
            <ul>
                <li><a href="/order/taxi">Taksi Sifarişi Ver</a></li>
                <li><a href="/admin/drivers">Günlük hesabatlar</a></li>
                <li><a href="/register/driver">Sürücü Qeydiyyat</a></li>
                <li><a href="/add-coordinates">Koordinat Əlavə Et</a></li>
                <li><a href="/admin/delete-drivers">Şoferi Sil</a></li>
                <li><a href="/map-coordinates">Ünvanlar</a></li>
                <li><a href="/pricetiers">Qiymət təyin et</a></li>
                <li><a href="admin/app-version">Tətbiq Versiyası</a></li>
            </ul>
        </nav>
    </header>

    <div class="flex-container">
        <div class="container update-limit">
            <h3><i class="fas fa-wallet"></i> Balansı Yenilə</h3>
            <div class="update-balance-section">
                <label for="driverSelectUpdate">Sürücü Seçin:</label>
                <select id="driverSelectUpdate" onchange="loadDriverLimitForUpdate()">
                    <option value="">Bir sürücü seçin</option>
                </select>

                <label for="balanceAmount">Balans Miktarı:</label>
                <div class="balance-controls">
                    <button type="button" id="decrementBalance" onmousedown="startDecrement()" onmouseup="stopChange()" onmouseleave="stopChange()"><i class="fas fa-minus"></i></button>
                    <input type="number" id="balanceAmount" value="0.00" step="0.1" required>
                    <button type="button" id="incrementBalance" onmousedown="startIncrement()" onmouseup="stopChange()" onmouseleave="stopChange()"><i class="fas fa-plus"></i></button>
                </div>
                <button type="button" class="primary" onclick="updateLimit()"><i class="fas fa-sync-alt"></i> Balansı Yenilə</button>
            </div>
        </div>

        <div class="container driver-summary">
            <h2><i class="fas fa-car"></i> Sürücülərin Balansı</h2>
            <div class="driver-list">
                <table id="driverTable">
                    <thead>
                        <tr>
                            <th>Ad Soyad</th>
                            <th>Status</th>
                            <th>Balans</th>
                        </tr>
                    </thead>
                    <tbody>
                        </tbody>
                </table>
                <div id="noDriversMessage" class="message info hidden">Sistemdə heç bir sürücü yoxdur.</div>
            </div>
        </div>
    </div>

    <footer>
        <a href="/orders">© 2024 Arda Taksi. Bütün hüquqlar qorunur.</a>
    </footer>

    <script>
        let driversData = [];
        let changeInterval;
        const changeAmount = 0.1; // Amount to increase/decrease by
        let currentSelectedDriverId = null;

        async function fetchDrivers() {
            try {
                const response = await fetch('/api/drivers/get-drivers');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                driversData = await response.json();
                const driverTableBody = document.querySelector('#driverTable tbody');
                const driverSelectUpdate = document.getElementById('driverSelectUpdate');
                const noDriversMessage = document.getElementById('noDriversMessage');

                driverTableBody.innerHTML = '';
                driverSelectUpdate.innerHTML = '<option value="">Bir sürücü seçin</option>';

                if (driversData.length === 0) {
                    noDriversMessage.classList.remove('hidden');
                } else {
                    noDriversMessage.classList.add('hidden');
                    driversData.forEach(driver => {
                        // Populate the table
                        const row = driverTableBody.insertRow();
                        const statusText = driver.atWork ? 'İşdə' : 'İşdə deyil';
                        const statusClass = driver.atWork ? 'text-success' : 'text-danger';
                        const balance = (driver.limit != null && driver.limit !== '') ? parseFloat(driver.limit).toFixed(1) : '0.00';

                        row.innerHTML = `
                            <td>${driver.firstName} ${driver.lastName}</td>
                            <td><span class="status-text ${statusClass}">${statusText}</span></td>
                            <td>${balance} ₼</td>
                        `;

                        // Populate the select for updating balance
                        const option = document.createElement('option');
                        option.value = driver._id;
                        option.textContent = `${driver.firstName} ${driver.lastName}`;
                        driverSelectUpdate.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Sürücülər alınarkən xəta baş verdi:', error);
                document.getElementById('noDriversMessage').textContent = 'Sürücülər yüklənərkən xəta baş verdi.';
                document.getElementById('noDriversMessage').classList.remove('hidden');
                document.getElementById('noDriversMessage').classList.add('error');
            }
        }

        function loadDriverLimitForUpdate() {
            currentSelectedDriverId = document.getElementById('driverSelectUpdate').value;
            const selectedDriver = driversData.find(driver => driver._id === currentSelectedDriverId);

            if (selectedDriver) {
                document.getElementById('balanceAmount').value = parseFloat(selectedDriver.limit).toFixed(1);
            } else {
                document.getElementById('balanceAmount').value = '0.00';
            } 
        }

        function startChange(increment) {
            let balanceInput = document.getElementById('balanceAmount');
            let currentValue = parseFloat(balanceInput.value || 0);

            const performChange = () => {
                currentValue = parseFloat(balanceInput.value);
                const newValue = increment ? (currentValue + changeAmount) : (currentValue - changeAmount);
                balanceInput.value = newValue.toFixed(1);
            };

            performChange(); // Initial change
            changeInterval = setInterval(performChange, 100); // Continuous change
        }

        function startIncrement() {
            startChange(true);
        }

        function startDecrement() {
            startChange(false);
        }

        function stopChange() {
            clearInterval(changeInterval);
        }

        async function updateLimit() {
            const selectedDriverId = document.getElementById('driverSelectUpdate').value;
            const newLimit = document.getElementById('balanceAmount').value;

            if (!selectedDriverId) {
                alert('Lütfən bir sürücü seçin.');
                return;
            }

            const numericNewLimit = parseFloat(newLimit);
            if (isNaN(numericNewLimit)) {
                alert('Lütfən etibarlı bir balans dəyəri daxil edin.');
                return;
            }

            try {
                const response = await fetch(`/api/drivers/${selectedDriverId}/updateLimit`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        limit: numericNewLimit
                    }),
                });

                if (response.ok) {
                    alert('Balans uğurla yeniləndi!');
                    fetchDrivers(); // Refresh the driver list and table
                } else {
                    const errorData = await response.json();
                    alert(`Balans yenilənərkən xəta baş verdi: ${errorData.msg || 'Bilinməyən Xəta'}`);
                }
            } catch (error) {
                console.error('Balans yenilənərkən şəbəkə xətası:', error);
                alert('Balans yenilənərkən şəbəkə xətası baş verdi. Zəhmət olmasa yenidən cəhd edin.');
            }
        }

        document.addEventListener('DOMContentLoaded', fetchDrivers);

        // --- Existing JavaScript for Taxi Order Form (from your original code) ---
        // I'm keeping this section as provided, assuming these elements and their logic are used elsewhere or in a different context within your application.
        // If these sections (order form, order details, etc.) are NOT used on *this specific page*,
        // you might consider removing them to keep the page's JS cleaner and avoid potential ID conflicts.
        // However, given the original prompt asked to modify "bu sayfada", I'm preserving the existing order-related JS.

        const mainTitle = document.getElementById('mainTitle'); // This ID might not exist on this page's current HTML structure
        const orderFormSection = document.getElementById('orderFormSection'); // Not present in the provided HTML
        const orderDetailsSection = document.getElementById('orderDetailsSection'); // Not present in the provided HTML
        const orderDetailsContentDiv = document.getElementById('orderDetailsContent'); // Not present in the provided HTML
        const driverInfoDiv = document.getElementById('driverInfo'); // Not present in the provided HTML
        const driverDetailsDiv = document.getElementById('driverDetails'); // Not present in the provided HTML
        const driverStatusPara = document.getElementById('driverStatus'); // Not present in the provided HTML
        const form = document.getElementById('taxiOrderForm'); // Not present in the provided HTML
        const messageDiv = document.getElementById('message'); // Not present in the provided HTML
        const cancelOrderButton = document.getElementById('cancelOrderButton'); // Not present in the provided HTML
        const confirmOrderButton = document.getElementById('confirmOrderButton'); // Not present in the provided HTML

        const currentAddressInput = document.getElementById('currentAddressText'); // Not present in the provided HTML
        const currentAddressLatitudeInput = document.getElementById('currentAddressLatitude'); // Not present in the provided HTML
        const currentAddressLongitudeInput = document.getElementById('currentAddressLongitude'); // Not present in the provided HTML
        const currentAddressResultsList = document.getElementById('currentAddressResults'); // Not present in the provided HTML

        const destinationAddressInput = document.getElementById('destinationAddressText'); // Not present in the provided HTML
        const destinationAddressLatitudeInput = document.getElementById('destinationAddressLatitude'); // Not present in the provided HTML
        const destinationAddressLongitudeInput = document.getElementById('destinationAddressLongitude'); // Not present in the provided HTML
        const destinationAddressResultsList = document.getElementById('destinationAddressResults'); // Not present in the provided HTML

        const destination2Input = document.getElementById('destination2Text'); // Not present in the provided HTML
        const destination2LatitudeInput = document='destination2Latitude'; // Typo fixed: id='destination2Latitude'
        const destination2LongitudeInput = document.getElementById('destination2Longitude'); // Not present in the provided HTML
        const destination2ResultsList = document.getElementById('destination2Results'); // Not present in the provided HTML

        const telInput = document.getElementById('tel'); // Not present in the provided HTML
        const additionalInfoTextarea = document.getElementById('additionalInfo'); // Not present in the provided HTML

        let currentRequestId = null;
        let pollInterval = null;
        let allCoordinates = [];

        function stopPolling() {
            if (pollInterval) {
                clearInterval(pollInterval);
                pollInterval = null;
            }
        }

        async function fetchAllCoordinates() {
            // This function is dependent on elements not present in the current HTML.
            // If it's not needed for this page, you can remove it.
            try {
                const response = await fetch('/api/coordinates');
                if (response.ok) {
                    allCoordinates = await response.json();
                } else {
                    console.error('Koordinatlar yüklənərkən xəta baş verdi:', response.statusText);
                }
            } catch (error) {
                console.error('Koordinatlar yüklənərkən server xətası:', error);
            }
        }

        function filterAndDisplayResults(inputElement, resultsListElement, latitudeInput, longitudeInput) {
            // This function is dependent on elements not present in the current HTML.
        }

        if (currentAddressInput) currentAddressInput.addEventListener('input', () => {
            filterAndDisplayResults(currentAddressInput, currentAddressResultsList, currentAddressLatitudeInput, currentAddressLongitudeInput);
        });

        if (destinationAddressInput) destinationAddressInput.addEventListener('input', () => {
            filterAndDisplayResults(destinationAddressInput, destinationAddressResultsList, destinationAddressLatitudeInput, destinationAddressLongitudeInput);
        });

        if (destination2Input) destination2Input.addEventListener('input', () => {
            filterAndDisplayResults(destination2Input, destination2ResultsList, destination2LatitudeInput, destination2LongitudeInput);
        });

        document.addEventListener('click', (event) => {
            if (!event.target.closest('.address-input-container')) {
                if (currentAddressResultsList) currentAddressResultsList.style.display = 'none';
                if (destinationAddressResultsList) destinationAddressResultsList.style.display = 'none';
                if (destination2ResultsList) destination2ResultsList.style.display = 'none';
            }
        });

        async function fetchOrderDetails(id) {
            // This function is dependent on elements not present in the current HTML.
        }

        if (form) {
            form.addEventListener('submit', async (event) => { /* ... existing form submit logic ... */ });
        }
        if (cancelOrderButton) {
            cancelOrderButton.addEventListener('click', async () => { /* ... existing cancel order logic ... */ });
        }
        if (confirmOrderButton) {
            confirmOrderButton.addEventListener('click', async () => { /* ... existing confirm order logic ... */ });
        }
    </script>

</body>

</html>