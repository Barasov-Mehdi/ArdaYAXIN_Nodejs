<!DOCTYPE html>
<html lang="az">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Qiymət Təyin Etmə Səhifəsi</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <style>
        /* Global Variables for easy theme changes */
        :root {
            --primary-color: #28a745; /* Success Green */
            --primary-hover: #218838;
            --secondary-color: #007bff; /* Blue for update */
            --secondary-hover: #0056b3;
            --danger-color: #dc3545; /* Red for delete */
            --danger-hover: #c82333;
            --background-light: #f8f9fa;
            --background-dark: #e9ecef;
            --text-dark: #343a40;
            --text-light: #6c757d;
            --card-bg: #ffffff;
            --border-light: #dee2e6;
            --shadow-light: 0 4px 15px rgba(0, 0, 0, 0.08);
            --input-border: #ced4da;
            --input-focus: #80bdff;
            --input-shadow-focus: rgba(0, 123, 255, 0.25);
        }

        body {
            font-family: 'Lato', sans-serif;
            background-color: var(--background-light);
            color: var(--text-dark);
            margin: 0;
            padding: 0;
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center; /* Horizontally center content when it doesn't fill width */
        }

        .header {
            width: 100%;
            background-color: var(--primary-color);
            color: white;
            padding: 25px 0;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            margin-bottom: 30px;
        }

        .header h1 {
            margin: 0;
            font-size: 2.5em;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }

        .container {
            width: 95%;
            max-width: 1200px;
            margin: 0 auto 30px auto; /* Add margin to bottom for consistency */
            display: grid;
            gap: 25px;
            grid-template-columns: 1fr; /* Default to single column */
        }

        /* Responsive grid layout */
        @media (min-width: 768px) {
            .container {
                grid-template-columns: 2fr 1fr; /* Table takes 2/3, forms take 1/3 */
            }
            .form-section {
                grid-column: 2 / 3; /* Forms go into the second column */
                grid-row: 1 / span 2; /* Forms span two rows (Existing and Add) */
            }
            .table-section {
                grid-column: 1 / 2; /* Table stays in the first column */
                grid-row: 1 / 2;
            }
        }

        /* For a three-column layout if forms are side by side */
        @media (min-width: 1024px) {
            .container {
                grid-template-columns: 1fr 1fr 1fr; /* Table, Add Form, Update Form */
            }
            .table-section {
                grid-column: 1 / 2;
                grid-row: 1 / 2;
            }
            .add-section {
                grid-column: 2 / 3;
                grid-row: 1 / 2;
            }
            .update-section {
                grid-column: 3 / 4;
                grid-row: 1 / 2;
            }
        }


        .section {
            background-color: var(--card-bg);
            padding: 25px;
            border-radius: 10px;
            box-shadow: var(--shadow-light);
            border: 1px solid var(--border-light);
            transition: transform 0.2s ease;
        }

        .section:hover {
            transform: translateY(-3px);
        }

        h2 {
            margin-top: 0;
            color: var(--primary-color);
            margin-bottom: 20px;
            font-size: 1.8em;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        /* Table specific styles */
        table {
            width: 100%;
            border-collapse: separate; /* Use separate for rounded borders */
            border-spacing: 0;
            margin-top: 15px;
            overflow-x: auto; /* Enable horizontal scroll for table on small screens */
            display: block; /* Important for table-responsive to work with separate border-collapse */
        }

        thead {
            background-color: var(--background-dark);
        }

        th,
        td {
            border: 1px solid var(--border-light);
            padding: 15px;
            text-align: center;
            vertical-align: middle;
        }

        th {
            background-color: var(--background-dark);
            font-weight: 700;
            color: var(--text-dark);
            position: sticky;
            top: 0;
            z-index: 1;
        }

        tbody tr:nth-child(even) {
            background-color: #fcfcfc;
        }

        tbody tr:hover {
            background-color: #f0f0f0;
        }

        /* Form styling */
        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-light);
        }

        input[type="number"] {
            width: calc(100% - 22px); /* Adjust for padding and border */
            padding: 10px;
            border: 1px solid var(--input-border);
            border-radius: 6px;
            font-size: 1em;
            color: var(--text-dark);
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
            box-sizing: border-box; /* Include padding and border in width */
        }

        input[type="number"]:focus {
            outline: none;
            border-color: var(--input-focus);
            box-shadow: 0 0 0 0.25rem var(--input-shadow-focus);
        }

        /* Buttons */
        .btn {
            padding: 10px 18px;
            margin: 0 5px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 700;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            justify-content: center;
            text-decoration: none; /* For links styled as buttons */
        }

        .btn-delete {
            background-color: var(--danger-color);
            color: #fff;
        }

        .btn-delete:hover {
            background-color: var(--danger-hover);
            transform: translateY(-1px);
        }

        .btn-update {
            background-color: var(--secondary-color);
            color: #fff;
        }

        .btn-update:hover {
            background-color: var(--secondary-hover);
            transform: translateY(-1px);
        }

        .btn-add-primary {
            background-color: var(--primary-color);
            color: white;
            width: 100%; /* Make add button full width in its section */
            margin-top: 15px;
        }

        .btn-add-primary:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
        }

        .btn-cancel {
            background-color: var(--text-light);
            color: #fff;
            width: 100%; /* Make cancel button full width in its section */
            margin-top: 10px;
        }
        .btn-cancel:hover {
            background-color: #5a6268;
            transform: translateY(-1px);
        }


        /* Button group in table */
        .button-group {
            display: flex;
            justify-content: center;
            gap: 5px; /* Spacing between action buttons */
        }

        /* Update section specific */
        #updateSection {
            display: none; /* Hidden by default */
        }

        /* Mobile adjustments */
        @media (max-width: 767px) {
            .header h1 {
                font-size: 2em;
            }
            .container {
                padding: 0 15px;
            }
            .section {
                padding: 20px;
            }
            h2 {
                font-size: 1.5em;
            }
            th, td {
                padding: 10px;
                font-size: 0.9em;
            }
            .btn {
                padding: 8px 12px;
                font-size: 0.9em;
                gap: 5px;
            }
            /* Ensure table is scrollable on small screens */
            .table-responsive {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
            }
            table {
                min-width: 600px; /* Ensure table doesn't get too cramped */
            }
        }
    </style>
</head>

<body>
    <div class="header">
        <h1><i class="fas fa-money-bill-wave"></i> Qiymət Təyin Etmə Səhifəsi</h1>
    </div>

    <div class="container">
        <div class="section table-section">
            <h2><i class="fas fa-list-alt"></i> Hazırki Qiymətlər</h2>
            <div class="table-responsive">
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Kilometr (Max)</th>
                            <th>Qiymət</th>
                            <th>Funksiya</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (typeof tiers !== 'undefined' && tiers.length > 0) { %>
                        <% tiers.forEach(function(tier) { %>
                        <tr>
                            <td><%= tier._id %></td>
                            <td><%= tier.maxKm %> km</td>
                            <td><%= tier.price %> AZN</td>
                            <td class="button-group">
                                <button class="btn btn-delete" onclick="deleteTier('<%= tier._id %>')">
                                    <i class="fas fa-trash-alt"></i> Sil
                                </button>
                                <button class="btn btn-update"
                                    onclick="showUpdateForm('<%= tier._id %>', '<%= tier.maxKm %>', '<%= tier.price %>')">
                                    <i class="fas fa-edit"></i> Yenilə
                                </button>
                            </td>
                        </tr>
                        <% }) %>
                        <% } else { %>
                        <tr>
                            <td colspan="4">Heç bir qiymət təyinatı tapılmadı.</td>
                        </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="section form-section add-section">
            <h2><i class="fas fa-plus-circle"></i> Yeni Qiymət Əlavə Et</h2>
            <form id="addForm" onsubmit="return false;">
                <div class="form-group">
                    <label for="maxKm">Max Kilometr:</label>
                    <input type="number" id="maxKm" placeholder="Maksimum kilometr daxil edin" required min="0" />
                </div>
                <div class="form-group">
                    <label for="price">Qiymət (AZN):</label>
                    <input type="number" id="price" placeholder="Qiyməti daxil edin" required min="0" step="0.01" />
                </div>
                <button class="btn btn-add-primary" onclick="addTier()">
                    <i class="fas fa-plus"></i> Əlavə Et
                </button>
            </form>
        </div>

        <div class="section form-section update-section" id="updateSection">
            <h2><i class="fas fa-sync-alt"></i> Qiyməti Yenilə</h2>
            <form id="updateForm" onsubmit="return false;">
                <input type="hidden" id="updateId" />
                <div class="form-group">
                    <label for="updateMaxKm">Max Kilometr:</label>
                    <input type="number" id="updateMaxKm" placeholder="Yeni maksimum kilometr" required min="0" />
                </div>
                <div class="form-group">
                    <label for="updatePrice">Qiymət (AZN):</label>
                    <input type="number" id="updatePrice" placeholder="Yeni qiyməti daxil edin" required min="0" step="0.01" />
                </div>
                <button class="btn btn-add-primary" onclick="updateTier()">
                    <i class="fas fa-save"></i> Yenilə
                </button>
                <button class="btn btn-cancel" onclick="hideUpdateForm()">
                    <i class="fas fa-times-circle"></i> Ləğv Et
                </button>
            </form>
        </div>
    </div>

    <script>
        const apiBase = '/api/pricetiers';

        // Add function
        async function addTier() {
            const maxKm = document.getElementById('maxKm').value;
            const price = document.getElementById('price').value;
            if (!maxKm || !price || isNaN(Number(maxKm)) || isNaN(Number(price))) {
                alert('Zəhmət olmasa bütün sahələri düzgün doldurun.');
                return;
            }
            try {
                const response = await fetch(apiBase, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ maxKm: Number(maxKm), price: Number(price) })
                });
                if (response.ok) {
                    alert('Yeni qiymət təyin edildi.');
                    location.reload();
                } else {
                    const errorData = await response.json();
                    alert('Əlavə etmək alınmadı: ' + (errorData.msg || response.statusText));
                }
            } catch (err) {
                alert('Xəta baş verdi: ' + err.message);
            }
        }

        // Delete function
        async function deleteTier(id) {
            if (!confirm('Silmək istədiyinizə əminsiniz?')) return;
            try {
                const response = await fetch(`${apiBase}/${id}`, {
                    method: 'DELETE'
                });
                if (response.ok) {
                    alert('Silindi.');
                    location.reload();
                } else {
                    const errorData = await response.json();
                    alert('Silmək alınmadı: ' + (errorData.msg || response.statusText));
                }
            } catch (err) {
                alert('Xəta: ' + err.message);
            }
        }

        // Show update form
        function showUpdateForm(id, maxKm, price) {
            document.getElementById('updateSection').style.display = 'block';
            document.getElementById('updateId').value = id;
            document.getElementById('updateMaxKm').value = maxKm;
            document.getElementById('updatePrice').value = price;
            // Scroll to the update form
            document.getElementById('updateSection').scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // Hide update form
        function hideUpdateForm() {
            document.getElementById('updateSection').style.display = 'none';
        }

        // Update function
        async function updateTier() {
            const id = document.getElementById('updateId').value;
            const maxKm = document.getElementById('updateMaxKm').value;
            const price = document.getElementById('updatePrice').value;

            if (!maxKm || !price || isNaN(Number(maxKm)) || isNaN(Number(price))) {
                alert('Zəhmət olmasa bütün sahələri düzgün doldurun.');
                return;
            }

            try {
                const response = await fetch(`${apiBase}/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ maxKm: Number(maxKm), price: Number(price) })
                });
                if (response.ok) {
                    alert('Yeniləmə uğurlu oldu.');
                    location.reload();
                } else {
                    const errorData = await response.json();
                    alert('Yeniləmək alınmadı: ' + (errorData.msg || response.statusText));
                }
            } catch (err) {
                alert('Xəta: ' + err.message);
            }
        }
    </script>
</body>

</html>