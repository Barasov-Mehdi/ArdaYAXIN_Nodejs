<!DOCTYPE html>
<html lang="az">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sürücü İdarəetmə Paneli</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Global Variables and Resets */
        :root {
            --dark-bg: #1A1A2E;
            --card-bg: #16213E;
            --primary-color: #0F3460;
            --accent-color: #E94560;
            --text-light: #E0E0E0;
            --text-dark: #FFFFFF;
            --border-color: #0A1931;
            --success-color: #00BF63;
            --warning-color: #FFC107;
            --danger-color: #DC3545;
            --info-color: #17A2B8;
            --button-hover: #E03554;
            --shadow-light: 0 4px 10px rgba(0, 0, 0, 0.2);
            --shadow-dark: 0 6px 15px rgba(0, 0, 0, 0.4);
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--dark-bg);
            color: var(--text-light);
            line-height: 1.6;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 40px 20px;
            box-sizing: border-box;
        }

        .container {
            max-width: 1200px;
            width: 100%;
            margin: auto;
            background-color: var(--card-bg);
            padding: 35px;
            border-radius: 15px;
            box-shadow: var(--shadow-dark);
            border: 1px solid var(--border-color);
        }

        h1,
        h2 {
            font-size: 28px;
            margin-bottom: 25px;
            color: var(--accent-color);
            text-align: center;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        h2 {
            font-size: 22px;
            margin-top: 35px;
        }

        /* Action Section */
        .action-section {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-top: 30px;
            padding: 20px;
            background-color: var(--primary-color);
            border-radius: 10px;
            box-shadow: var(--shadow-light);
        }

        .action-section button {
            background-color: var(--danger-color);
            color: var(--text-dark);
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .action-section button:hover {
            transform: translateY(-2px);
        }

        .action-section button.reset-button {
            background-color: var(--info-color); /* Mavi ton */
        }

        .action-section button.reset-button:hover {
            background-color: #117a8b;
        }


        /* Report Section */
        .report-section {
            margin-top: 40px;
            padding-top: 20px;
        }

        .report-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-top: 20px;
        }

        .report-card {
            background-color: var(--dark-bg);
            border: 1px solid var(--primary-color);
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--shadow-light);
            text-align: center;
            transition: transform 0.2s ease, border-color 0.3s ease;
        }

        .report-card:hover {
            transform: translateY(-5px);
            border-color: var(--accent-color);
        }

        .report-card h3 {
            margin-top: 0;
            color: var(--text-light);
            font-size: 1.1em;
            margin-bottom: 10px;
        }

        .report-card p {
            font-size: 2.2em; /* Bigger font for numbers */
            font-weight: bold;
            color: var(--success-color);
            margin: 0;
        }

        /* Notification */
        .notification {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-weight: 500;
            box-shadow: var(--shadow-light);
            display: none;
            /* JS will show/hide */
            transition: all 0.3s ease;
        }

        .notification.success {
            background-color: var(--success-color);
            color: var(--dark-bg);
        }

        .notification.error {
            background-color: var(--danger-color);
            color: var(--text-dark);
        }

        /* Driver List */
        #drivers-list {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 20px;
            max-height: 500px; /* Fixed height for scrolling */
            overflow-y: auto;
            padding-right: 10px; /* Space for scrollbar */
            margin-top: 20px;
        }

        /* Scrollbar styles for drivers-list */
        #drivers-list::-webkit-scrollbar {
            width: 10px;
        }

        #drivers-list::-webkit-scrollbar-track {
            background: var(--dark-bg);
            border-radius: 10px;
        }

        #drivers-list::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 10px;
        }

        #drivers-list::-webkit-scrollbar-thumb:hover {
            background: var(--accent-color);
        }

        .driver-card {
            background-color: var(--dark-bg);
            border: 1px solid var(--primary-color);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 0; /* Removed default margin-bottom */
            display: flex;
            flex-direction: column;
            gap: 15px;
            box-shadow: var(--shadow-light);
            transition: transform 0.2s ease, border-color 0.3s ease;
        }

        .driver-card:hover {
            transform: translateY(-5px);
            border-color: var(--accent-color);
        }

        .driver-info h3 {
            margin-top: 0;
            margin-bottom: 10px;
            color: var(--accent-color);
            font-size: 1.3em;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .driver-info p {
            margin: 5px 0;
            font-size: 1em;
            color: var(--text-light);
        }
        .driver-info strong {
            color: var(--text-dark);
            display: inline-block;
            min-width: 120px; /* Align labels */
        }
        .driver-info span {
            font-weight: 600;
        }


        /* Media Queries for Responsiveness */
        @media (max-width: 768px) {
            body {
                padding: 20px 10px;
            }

            .container {
                padding: 20px;
                border-radius: 10px;
            }

            h1 {
                font-size: 24px;
                margin-bottom: 20px;
            }

            h2 {
                font-size: 20px;
                margin-top: 25px;
            }

            .action-section {
                flex-direction: column;
                gap: 15px;
                padding: 15px;
            }

            .action-section button {
                width: 100%;
                font-size: 0.95rem;
                padding: 10px 15px;
            }

            .report-grid {
                grid-template-columns: 1fr; /* Stack cards on small screens */
                gap: 15px;
            }

            .report-card {
                padding: 15px;
            }

            .report-card p {
                font-size: 1.8em;
            }

            .driver-card {
                padding: 15px;
                gap: 10px;
            }
            .driver-info h3 {
                font-size: 1.1em;
            }
            .driver-info p {
                font-size: 0.9em;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 20px;
            }
            h2 {
                font-size: 18px;
            }
            .report-card p {
                font-size: 1.5em;
            }
            .driver-info strong {
                min-width: 90px;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <h1><i class="fas fa-chart-line"></i> Sürücü İdarəetmə Paneli</h1>

        <div class="action-section">
            <button onclick="resetAllDriverDailyStats()" class="reset-button">
                <i class="fas fa-redo"></i> Günlük Statistikaları Sıfırla
            </button>
            <button onclick="deleteAllOrders()">
                <i class="fas fa-trash-alt"></i> Bütün Sifarişləri Bitir
            </button>
        </div>

        <div class="report-section">
            <h2><i class="fas fa-chart-bar"></i> Ümumi Hesabatlar</h2>
            <div class="report-grid">
                <div class="report-card">
                    <h3>Ümumi Günlük Sifariş Sayı</h3>
                    <p id="total-daily-orders">0</p>
                </div>
                <div class="report-card">
                    <h3>Ümumi Günlük Qazanc</h3>
                    <p id="total-daily-earnings">0.00 AZN</p>
                </div>
                <div class="report-card">
                    <h3>Ümumi Günlük Qazancın 15%-i</h3>
                    <p id="total-daily-earnings-15-percent">0.00 AZN</p>
                </div>
            </div>
        </div>

        <div id="notification" class="notification"></div>

        <h2><i class="fas fa-users-cog"></i> Sürücü Siyahısı</h2>
        <div id="drivers-list">
            <% if (drivers && drivers.length > 0) { %>
                <% drivers.forEach(driver => { %>
                    <div class="driver-card" data-driver-id="<%= driver._id %>">
                        <div class="driver-info">
                            <h3>
                                <i class="fas fa-user-circle"></i> <%= driver.firstName %> <%= driver.lastName %>
                                (<%= driver.atWork ? 'İşdədir' : 'İşdə deyil' %>)
                            </h3>
                            <p><strong>Mövcud Balans:</strong> <span id="limit-<%= driver._id %>">
                                <%= driver.limit !== null ? driver.limit : 'Təyin olunmayıb' %>
                            </span></p>
                            <p><strong>Günlük Sifariş Sayı:</strong> <span id="daily-order-count-<%= driver._id %>">
                                <%= driver.dailyOrderCount || 0 %>
                            </span></p>
                            <p><strong>Günlük Qazanc:</strong> <span id="daily-earnings-<%= driver._id %>">
                                <%= (driver.dailyEarnings || 0).toFixed(2) %> AZN
                            </span></p>
                        </div>
                        </div>
                <% }); %>
            <% } else { %>
                <p style="text-align: center; color: var(--text-light);">Heç sürücü tapılmadı.</p>
            <% } %>
        </div>

    </div>

    <script>
        const BASE_API_URL = '/api/drivers';
        const BASE_ORDERS_API_URL = '/api/taxis';

        function showNotification(message, isSuccess = true) {
            const notificationDiv = document.getElementById('notification');
            notificationDiv.textContent = message;
            notificationDiv.className = `notification ${isSuccess ? 'success' : 'error'}`;
            notificationDiv.style.display = 'block';

            setTimeout(() => {
                notificationDiv.style.display = 'none';
            }, 3000);
        }

        // updateDriverField fonksiyonu kaldırıldı, çünkü HTML'den input alanları ve butonları kaldırıldı.
        // Eger sürücülerin tek tek sahalarını güncelleyecek bir arayüze ihtiyacınız olursa,
        // bu fonksiyonu ve ilgili HTML kısımlarını daha uygun bir yere (mesela modallar) taşıyaraq yeniden ekleyebilirsiniz.

        async function fetchDriverStats() {
            const driversList = document.getElementById('drivers-list');
            // Check if driversList has child elements (i.e., drivers are rendered from EJS)
            if (driversList.children.length === 0 || driversList.children[0].tagName === 'P') {
                // If no drivers initially or only "Heç sürücü tapılmadı." text, try to fetch and render them
                try {
                    const response = await fetch(`${BASE_API_URL}/get-drivers`);
                    if (!response.ok) {
                        console.error('Bütün sürücüləri çəkərkən xəta baş verdi:', response.statusText);
                        return;
                    }
                    const drivers = await response.json();
                    if (drivers.length > 0) {
                        driversList.innerHTML = ''; // Clear "No drivers found" message
                        drivers.forEach(driver => {
                            const driverCard = document.createElement('div');
                            driverCard.className = 'driver-card';
                            driverCard.dataset.driverId = driver._id;
                            driverCard.innerHTML = `
                                <div class="driver-info">
                                    <h3>
                                        <i class="fas fa-user-circle"></i> ${driver.firstName} ${driver.lastName}
                                        (${driver.atWork ? 'İşdədir' : 'İşdə deyil'})
                                    </h3>
                                    <p><strong>Mövcud Balans:</strong> <span id="limit-${driver._id}">
                                        ${driver.limit !== null ? driver.limit : 'Təyin olunmayıb'}
                                    </span></p>
                                    <p><strong>Günlük Sifariş Sayı:</strong> <span id="daily-order-count-${driver._id}">
                                        ${driver.dailyOrderCount || 0}
                                    </span></p>
                                    <p><strong>Günlük Qazanc:</strong> <span id="daily-earnings-${driver._id}">
                                        ${(driver.dailyEarnings || 0).toFixed(2)} AZN
                                    </span></p>
                                </div>
                            `;
                            driversList.appendChild(driverCard);
                        });
                    } else {
                        driversList.innerHTML = '<p style="text-align: center; color: var(--text-light);">Heç sürücü tapılmadı.</p>';
                    }
                } catch (error) {
                    console.error('Sürücü məlumatlarını alarkən şəbəkə xətası:', error);
                    driversList.innerHTML = '<p style="text-align: center; color: var(--danger-color);">Sürücüləri gətirərkən xəta baş verdi.</p>';
                }
            } else {
                // If drivers are already rendered, just update their stats
                const driverCards = driversList.querySelectorAll('.driver-card');
                try {
                    const allDriversResponse = await fetch(`${BASE_API_URL}/get-drivers`);
                    if (!allDriversResponse.ok) {
                        console.error('Bütün sürücüləri çəkərkən xəta baş verdi:', allDriversResponse.statusText);
                        return;
                    }
                    const allDrivers = await allDriversResponse.json();

                    for (const card of driverCards) {
                        const driverId = card.dataset.driverId;
                        const driverData = allDrivers.find(d => d._id === driverId);

                        if (driverData) {
                            document.getElementById(`limit-${driverId}`).textContent = driverData.limit !== null ? driverData.limit : 'Təyin olunmayıb';
                            document.getElementById(`daily-order-count-${driverId}`).textContent = driverData.dailyOrderCount || 0;
                            document.getElementById(`daily-earnings-${driverId}`).textContent = `${(driverData.dailyEarnings || 0).toFixed(2)} AZN`;
                        } else {
                            // If a driver exists in DOM but not in fetched data (e.g., deleted), remove it
                            card.remove();
                            console.warn(`Driver with ID ${driverId} not found in fetched data and removed from DOM.`);
                        }
                    }
                } catch (error) {
                    console.error('Sürücü məlumatlarını alarkən şəbəkə xətası:', error);
                }
            }
        }


        async function resetAllDriverDailyStats() {
            if (!confirm('Əminsiniz? Bütün sürücülərin günlük qazanc və sifariş sayları sıfırlanacaq! Bu geri alınmaz bir əməliyyatdır!')) {
                return;
            }

            try {
                const response = await fetch(`${BASE_API_URL}/reset-daily-stats`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                });

                const data = await response.json();

                if (response.ok) {
                    showNotification(data.msg, true);
                    fetchDriverStats();
                    calculateOverallReports();
                } else {
                    showNotification(data.msg || 'Günlük statistika sıfırlanarkən bir xəta baş verdi.', false);
                }
            } catch (error) {
                console.error('Günlük statistika sıfırlama xətası:', error);
                showNotification('Server ilə əlaqədə bir xəta baş verdi.', false);
            }
        }

        async function calculateOverallReports() {
            let totalDailyOrders = 0;
            let totalDailyEarnings = 0;
            let totalDailyEarnings15Percent = 0;

            try {
                const allDriversResponse = await fetch(`${BASE_API_URL}/get-drivers`);
                if (allDriversResponse.ok) {
                    const drivers = await allDriversResponse.json();
                    for (const driver of drivers) {
                        totalDailyOrders += (driver.dailyOrderCount || 0);
                        totalDailyEarnings += (driver.dailyEarnings || 0);
                    }
                    totalDailyEarnings15Percent = totalDailyEarnings * 0.15;
                } else {
                    console.error("Bütün sürücülər alınarkən xəta baş verdi (hesabatlar üçün).");
                }

                document.getElementById('total-daily-orders').textContent = totalDailyOrders;
                document.getElementById('total-daily-earnings').textContent = `${totalDailyEarnings.toFixed(2)} AZN`;
                document.getElementById('total-daily-earnings-15-percent').textContent = `${totalDailyEarnings15Percent.toFixed(2)} AZN`;

                // Haftalık ve Aylık raporlar için fonksiyonlar burada çağrılabilir (eğer implemente olunsa)
                // async function fetchOverallWeeklyStats() { /* ... */ }
                // async function fetchOverallMonthlyStats() { /* ... */ }
                // fetchOverallWeeklyStats();
                // fetchOverallMonthlyStats();

            } catch (error) {
                console.error('Ümumi hesabatlar hesablanarkən xəta:', error);
            }
        }

        async function deleteAllOrders() {
            if (!confirm('Əminsiniz? Bütün sifarişlər silinəcək! Bu geri alınmaz bir əməliyyatdır!')) {
                return;
            }

            try {
                const response = await fetch(`${BASE_ORDERS_API_URL}/delete-all-requests`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                });

                const data = await response.json();

                if (response.ok) {
                    showNotification(data.msg, true);
                    // Siparişler silindikten sonra, sipariş paneli güncellenmeli.
                    // Eğer burada sipariş listesi varsa onu boşalt.
                    // Ya da siparişlerin gösterildiği ana sayfayı yenileyen bir çağrı yapabilirsin.
                    // Örn: window.location.reload(); (tüm sayfayı yenilemek için)
                } else {
                    showNotification(data.msg || 'Bütün sifarişlər silinərkən bir xəta baş verdi.', false);
                }
            } catch (error) {
                console.error('Tüm siparişleri silme hatası:', error);
                showNotification('Server ilə əlaqədə bir xəta baş verdi.', false);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchDriverStats(); // Sürücü statistikalarını ilk yükləmədə gətir
            calculateOverallReports(); // Ümumi hesabatları ilk yükləmədə gətir

            setInterval(fetchDriverStats, 30000); // Hər 30 saniyədə bir sürücü statistikalarını yenilə
            setInterval(calculateOverallReports, 60000); // Hər 60 saniyədə bir ümumi hesabatları yenilə
        });
    </script>
</body>

</html>