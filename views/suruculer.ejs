<!DOCTYPE html>
<html lang="az">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sürücü İdarəetmə və Hesabat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        h1,
        h2 {
            color: #0056b3;
            text-align: center;
            margin-bottom: 20px;
            font-size: 25px;
        }

        .driver-card {
            background-color: #e9ecef;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            display: flex;
            flex-wrap: wrap;
            /* Kiçik ekranlarda bükülməsi üçün */
            justify-content: space-between;
            align-items: center;
        }

        .driver-info {
            flex-grow: 1;
            min-width: 200px;
            /* Kiçik ekranlarda oxunaqlılığı qorumaq üçün */
        }

        .driver-info h3 {
            margin-top: 0;
            color: #333;
        }

        .driver-actions {
            display: flex;
            flex-wrap: wrap;
            /* Kiçik ekranlarda bükülməsi üçün */
            gap: 10px;
            align-items: center;
            margin-top: 10px;
            /* Kiçik ekranlarda məlumatdan ayırmaq üçün */
        }

        .driver-actions input[type="number"],
        .driver-actions input[type="text"] {
            /* Text input da əlavə olundu */
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            width: 100px;
            /* Genişlik artırıldı */
        }

        .driver-actions button {
            background-color: #007bff;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            white-space: nowrap;
            /* Düymə mətninin bir sətirdə qalması üçün */
        }

        .driver-actions button:hover {
            background-color: #0056b3;
        }

        .report-section {
            margin-top: 30px;
            border-top: 1px solid #dee2e6;
            padding-top: 20px;
        }

        .report-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            /* Daha geniş kartlar */
            gap: 20px;
        }

        .report-card {
            background-color: #f8f9fa;
            border: 1px solid #e2e6ea;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            text-align: center;
            /* Mətn mərkəzləşdirildi */
        }

        .report-card h3 {
            margin-top: 0;
            color: #6c757d;
            font-size: 1.1em;
        }

        .report-card p {
            font-size: 1.5em;
            /* Şrift ölçüsü artırıldı */
            font-weight: bold;
            color: #28a745;
        }

        .notification {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 5px;
            text-align: center;
            display: none;
            /* JavaScript ilə göstəriləcək */
        }

        #drivers-list {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 15px;
            height: 450px;
            overflow-y: auto;
        }

        .action-section {
            display: flex;
            justify-content: center;
            padding: 0 20px;
        }
        .action-section button{
            margin: 0 30px;
            width: 100px;
        }
       
    </style>
</head>

<body>
    <div class="container">
        <h1>Sürücü İdarəetmə Paneli</h1>
        <!-- <div class="action-section"
            style="margin-top: 30px; padding: 20px; background-color: #f0f0f0; border-radius: 8px;">
            <h2>Sürücü Verilerini Sıfırla</h2>
            <button onclick="resetAllDriverDailyStats()"
                style="background-color: #dc3545; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">
                Günlük Qazanc və Sifariş Saylarını Sıfırla
            </button>
        </div> -->
        <div class="action-section"
            style="margin-top: 30px; padding: 20px; background-color: #f0f0f0; border-radius: 8px;">
            <!-- <h2>Sürücü Verilerini Sıfırla</h2> -->
            <button onclick="resetAllDriverDailyStats()"
                style="background-color: blue; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">
                Sıfırla
            </button>
            <hr style="margin: 20px 0; border: 0; border-top: 1px solid #ccc;">
            <!-- <h2>Bütün Siparişləri Sil</h2> -->
            <button onclick="deleteAllOrders()"
                style="background-color: #dc3545; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px;">
                Bitir
            </button>
        </div>

        <div class="report-section">
            <h2>Ümumi Hesabatlar</h2>
            <div class="report-grid">
                <div class="report-card">
                    <h3>Ümumi Günlük Sifariş Sayı</h3>
                    <p id="total-daily-orders">0</p>
                </div>
                <div class="report-card">
                    <h3>Ümumi Günlük Qazanc</h3>
                    <p id="total-daily-earnings">0.00 AZN</p>
                </div>
                <!-- <div class="report-card">
                    <h3>Ümumi Həftəlik Sifariş Sayı</h3>
                    <p id="total-weekly-orders">Hesablanır...</p>
                </div> -->
                <!-- <div class="report-card">
                    <h3>Ümumi Həftəlik Qazanc</h3>
                    <p id="total-weekly-earnings">Hesablanır... AZN</p>
                </div> -->
                <!-- <div class="report-card">
                    <h3>Ümumi Aylıq Sifariş Sayı</h3>
                    <p id="total-monthly-orders">Hesablanır...</p>
                </div> -->
                <!-- <div class="report-card">
                    <h3>Ümumi Aylıq Qazanc</h3>
                    <p id="total-monthly-earnings">Hesablanır... AZN</p>
                </div> -->
                <div class="report-card">
                    <h3>Ümumi Günlük Qazancın 15%-i</h3>
                    <p id="total-daily-earnings-15-percent">0.00 AZN</p>
                </div>
            </div>
        </div>

        <div id="notification" class="notification"></div>

        <h2>Sürücü Siyahısı</h2>
        <div id="drivers-list">
            <% if (drivers && drivers.length> 0) { %>
                <% drivers.forEach(driver=> { %>
                    <div class="driver-card" data-driver-id="<%= driver._id %>">
                        <div class="driver-info">
                            <h3>
                                <%= driver.firstName %>
                                    <%= driver.lastName %> (<%= driver.atWork ? 'İşdədir' : 'İşdə deyil' %>)
                            </h3>
                            <p>Mövcud Balans: <span id="limit-<%= driver._id %>">
                                    <%= driver.limit !==null ? driver.limit : 'Təyin olunmayıb' %>
                                </span></p>
                            <p>Günlük Sifariş Sayı: <span id="daily-order-count-<%= driver._id %>">
                                    <%= driver.dailyOrderCount || 0 %>
                                </span></p>
                            <p>Günlük Qazanc: <span id="daily-earnings-<%= driver._id %>">
                                    <%= (driver.dailyEarnings || 0).toFixed(2) %> AZN
                                </span></p>
                        </div>
                        <!-- <div class="driver-actions">
                            <input type="number" id="limit-input-<%= driver._id %>" placeholder="Yeni Limit"
                                step="0.01">
                            <button onclick="updateDriverField('<%= driver._id %>', 'limit')">Limiti Yenilə</button>

                            <input type="number" id="order-count-input-<%= driver._id %>"
                                placeholder="Yeni Sifariş Sayı" step="1">
                            <button onclick="updateDriverField('<%= driver._id %>', 'dailyOrderCount')">Sifariş Sayını
                                Yenilə</button>

                            <input type="number" id="earnings-input-<%= driver._id %>" placeholder="Yeni Qazanc"
                                step="0.01">
                            <button onclick="updateDriverField('<%= driver._id %>', 'dailyEarnings')">Qazancı
                                Yenilə</button>
                        </div> -->
                    </div>
                    <% }); %>
                        <% } else { %>
                            <p>Heç sürücü tapılmadı.</p>
                            <% } %>
        </div>

    </div>

    <script>
        // drivers.ejs üçün JavaScript kodu

        const BASE_API_URL = '/api/drivers';
        const BASE_ORDERS_API_URL = '/api/taxis';

        function showNotification(message, isSuccess = true) {
            const notificationDiv = document.getElementById('notification');
            notificationDiv.textContent = message;
            notificationDiv.style.display = 'block';
            notificationDiv.style.backgroundColor = isSuccess ? '#d4edda' : '#f8d7da';
            notificationDiv.style.color = isSuccess ? '#155724' : '#721c24';
            notificationDiv.style.borderColor = isSuccess ? '#c3e6cb' : '#f5c6cb';

            setTimeout(() => {
                notificationDiv.style.display = 'none';
            }, 3000);
        }

        async function updateDriverField(driverId, field) {
            let inputElement;
            let value;
            const endpoint = `${BASE_API_URL}/${driverId}/update-stats`; // Yeni ümumi yeniləmə endpointi
            let fieldNameAZ;
            let displayElementId;

            if (field === 'limit') {
                inputElement = document.getElementById(`limit-input-${driverId}`);
                value = parseFloat(inputElement.value);
                fieldNameAZ = 'Limit';
                displayElementId = `limit-${driverId}`;
            } else if (field === 'dailyOrderCount') {
                inputElement = document.getElementById(`order-count-input-${driverId}`);
                value = parseInt(inputElement.value);
                fieldNameAZ = 'Günlük Sifariş Sayı';
                displayElementId = `daily-order-count-${driverId}`;
            } else if (field === 'dailyEarnings') {
                inputElement = document.getElementById(`earnings-input-${driverId}`);
                value = parseFloat(inputElement.value);
                fieldNameAZ = 'Günlük Qazanc';
                displayElementId = `daily-earnings-${driverId}`;
            } else {
                showNotification('Naməlum sahə!', false);
                return;
            }

            if (isNaN(value) || value < 0) {
                showNotification(`Zəhmət olmasa ${fieldNameAZ} üçün etibarlı bir rəqəm daxil edin.`, false);
                return;
            }

            try {
                const updateData = {};
                updateData[field] = value; // Dinamik olaraq obyekti formalaşdırırıq

                const response = await fetch(endpoint, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData),
                });

                const data = await response.json();

                if (response.ok) {
                    // Update the displayed value directly from the fetched data
                    document.getElementById(displayElementId).textContent = (field === 'dailyEarnings' ? data[field].toFixed(2) + ' AZN' : data[field]);
                    showNotification(`${fieldNameAZ} uğurla yeniləndi.`);
                    // inputElement.value = ''; // Bu sətri **sildik**! Input sahəsini təmizləmirik
                    fetchDriverStats(); // Yenilədikdən sonra bütün sürücü statistikalarını yenidən çək
                    calculateOverallReports(); // Ümumi hesabatları da yenilə
                } else {
                    showNotification(data.msg || `${fieldNameAZ} yenilənərkən bir xəta baş verdi.`, false);
                }
            } catch (error) {
                console.error(`${fieldNameAZ} yeniləmə xətası:`, error);
                showNotification('Server ilə əlaqədə bir xəta baş verdi.', false);
            }
        }

        // Sürücülərin mövcud limit, günlük sifariş sayı və günlük qazancını gətirmə
        async function fetchDriverStats() {
            const driversList = document.getElementById('drivers-list');
            const driverCards = driversList.querySelectorAll('.driver-card');

            try {
                const allDriversResponse = await fetch(`${BASE_API_URL}/get-drivers`);
                if (!allDriversResponse.ok) {
                    console.error('Bütün sürücüləri çəkərkən xəta baş verdi:', allDriversResponse.statusText);
                    return;
                }
                const allDrivers = await allDriversResponse.json();

                for (const card of driverCards) {
                    const driverId = card.dataset.driverId;
                    const driverData = allDrivers.find(d => d._id === driverId);

                    if (driverData) {
                        // Null və ya undefined dəyərlər üçün 0 təyin edirik
                        document.getElementById(`limit-${driverId}`).textContent = driverData.limit !== null ? driverData.limit : 'Təyin olunmayıb';
                        document.getElementById(`daily-order-count-${driverId}`).textContent = driverData.dailyOrderCount || 0;
                        document.getElementById(`daily-earnings-${driverId}`).textContent = `${(driverData.dailyEarnings || 0).toFixed(2)} AZN`;
                    } else {
                        console.warn(`Driver with ID ${driverId} not found in fetched data.`);
                    }
                }
            } catch (error) {
                console.error('Sürücü məlumatlarını alarkən şəbəkə xətası:', error);
            }
        }

        // drivers.ejs dosyanızdaki <script> etiketi içinde
        async function resetAllDriverDailyStats() {
            if (!confirm('Əminsiniz? Bütün sürücülərin günlük qazanc və sifariş sayları sıfırlanacaq!')) {
                return; // Kullanıcı iptal ettiyse çık
            }

            try {
                const response = await fetch(`${BASE_API_URL}/reset-daily-stats`, {
                    method: 'PUT', // PUT veya POST kullanabiliriz, burada bir güncelleme olduğu için PUT daha uygun
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    // Gövdeye herhangi bir veri göndermemize gerek yok
                });

                const data = await response.json();

                if (response.ok) {
                    showNotification(data.msg, true);
                    fetchDriverStats(); // Sıfırlandıktan sonra sürücü bilgilerini yenile
                    calculateOverallReports(); // Ümumi hesabatları da yenile
                } else {
                    showNotification(data.msg || 'Günlük statistika sıfırlanarkən bir xəta baş verdi.', false);
                }
            } catch (error) {
                console.error('Günlük statistika sıfırlama xətası:', error);
                showNotification('Server ilə əlaqədə bir xəta baş verdi.', false);
            }
        }

        // drivers.ejs dosyanızdaki <script> etiketi içinde
        async function calculateOverallReports() {
            let totalDailyOrders = 0;
            let totalDailyEarnings = 0;
            let totalDailyEarnings15Percent = 0; // Yeni değişken

            try {
                const allDriversResponse = await fetch(`${BASE_API_URL}/get-drivers`);
                if (allDriversResponse.ok) {
                    const drivers = await allDriversResponse.json();
                    for (const driver of drivers) {
                        totalDailyOrders += (driver.dailyOrderCount || 0);
                        totalDailyEarnings += (driver.dailyEarnings || 0);
                    }
                    // %15'i hesapla
                    totalDailyEarnings15Percent = totalDailyEarnings * 0.15;
                } else {
                    console.error("Bütün sürücülər alınarkən xəta baş verdi (hesabatlar üçün).");
                }

                document.getElementById('total-daily-orders').textContent = totalDailyOrders;
                document.getElementById('total-daily-earnings').textContent = `${totalDailyEarnings.toFixed(2)} AZN`;
                // Yeni eklediğimiz alanı güncelle
                document.getElementById('total-daily-earnings-15-percent').textContent = `${totalDailyEarnings15Percent.toFixed(2)} AZN`;

                // Diğer haftalık ve aylık fonksiyon çağrıları aynı kalacak
                async function fetchOverallWeeklyStats() { /* ... */ }
                async function fetchOverallMonthlyStats() { /* ... */ }

                fetchOverallWeeklyStats();
                fetchOverallMonthlyStats();

            } catch (error) {
                console.error('Ümumi hesabatlar hesablanarkən xəta:', error);
            }
        }

        async function deleteAllOrders() {
            if (!confirm('Əminsiniz? Bütün sifarişlər silinəcək! Bu geri alınmaz bir əməliyyatdır!')) {
                return; // Kullanıcı iptal ettiyse çık
            }

            try {
                const response = await fetch(`${BASE_ORDERS_API_URL}/delete-all-requests`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                const data = await response.json();

                if (response.ok) {
                    showNotification(data.msg, true);
                    // Tüm siparişler silindiği için, eğer siparişleri gösteren bir liste varsa onu da boşaltmalısınız.
                    // drivers.ejs sayfasında direkt sipariş listesi yoksa bu satıra gerek kalmaz.
                    // Örneğin: document.getElementById('orders-list').innerHTML = '<p>Heç sifariş tapılmadı.</p>';
                    // Eğer varsa, siparişleri yeniden yükleyen bir fonksiyonu çağırın.
                } else {
                    showNotification(data.msg || 'Bütün sifarişlər silinərkən bir xəta baş verdi.', false);
                }
            } catch (error) {
                console.error('Tüm siparişleri silme hatası:', error);
                showNotification('Server ilə əlaqədə bir xəta baş verdi.', false);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchDriverStats();
            calculateOverallReports();
            setInterval(fetchDriverStats, 30000); // Hər 30 saniyədə bir yeniləyir
            setInterval(calculateOverallReports, 60000); // Hər 60 saniyədə bir yeniləyir
        });
    </script>
</body>

</html>