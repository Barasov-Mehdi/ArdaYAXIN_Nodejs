const express = require('express');
const router = express.Router();
const TaxiRequest = require('../models/taxiRequest');
const Driver = require('../models/Driver');
const User = require('../models/User');
const { driverApp, customerApp } = require('../server');
const admin = require('firebase-admin');
const CanceledOrder = require('../models/CanceledOrder');
const ReassignedOrder = require('../models/ReassignedOrder');

function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
  const R = 6371;
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
    Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}
function deg2rad(deg) {
  return deg * (Math.PI / 180);
}

router.post('/request', async (req, res) => {
  try {
    const {
      currentAddress,
      destinationAddress,
      destination2,
      additionalInfo,
      additionalData,
      userId,
      price,
      atAddress
    } = req.body;

    if (
      !currentAddress || !currentAddress.text ||
      !destinationAddress || !destinationAddress.text ||
      !userId || price == null
    ) {
      return res.status(400).json({ message: 'Gerekli alanlar eksik.' });
    }

    const user = await User.findById(userId);
    if (!user || !user.tel || !user.name) {
      return res.status(400).json({ message: 'KullanÄ±cÄ± bulunamadÄ± veya telefon kaydÄ± yok.' });
    }

    const taxiRequest = new TaxiRequest({
      currentAddress,
      destinationAddress,
      destination2,
      additionalInfo,
      additionalData: !!additionalData,
      userId,
      tel: user.tel,
      name: user.name,
      price,
      atAddress
    });

    const savedRequest = await taxiRequest.save();

    const drivers = await Driver.find({ atWork: true, 'location.lat': { $exists: true }, 'location.lan': { $exists: true } });

    if (drivers.length === 0) {
      return res.status(201).json({
        message: 'Taksi isteÄŸi kaydedildi, ancak aktif sÃ¼rÃ¼cÃ¼ bulunamadÄ±.',
        requestId: savedRequest._id
      });
    }

    const orderLat = currentAddress.latitude;
    const orderLon = currentAddress.longitude;

    if (orderLat == null || orderLon == null) {
      return res.status(201).json({ message: 'Koordinatlar eksik.', requestId: savedRequest._id });
    }

    let closestDriver = null;
    let minDistance = Infinity;

    drivers.forEach(driver => {
      const { lat, lan } = driver.location;
      const distance = getDistanceFromLatLonInKm(orderLat, orderLon, lat, lan);
      if (distance < minDistance) {
        minDistance = distance;
        closestDriver = driver;
      }
    });

    if (!closestDriver || !closestDriver.fcmToken) {
      return res.status(201).json({
        message: 'Uygun sÃ¼rÃ¼cÃ¼ bulunamadÄ±.',
        requestId: savedRequest._id
      });
    }

    // ðŸ”¥ EN Ã–NEMLÄ° KISIM: SipariÅŸe en yakÄ±n sÃ¼rÃ¼cÃ¼yÃ¼ kaydet
    savedRequest.driverId = closestDriver._id;
    await savedRequest.save();

    const message = {
      notification: {
        title: 'AloArda',
        body: `Yeni SifariÅŸ: ${currentAddress.text} QiymÉ™t: ${price} â‚¼`,
      },
      android: {
        notification: {
          channel_id: 'default_channel_id',
          sound: 'zil_sesi',
          priority: 'high',
          visibility: 'public',
        },
      },
      data: {
        requestId: savedRequest._id.toString(),
        fromAddress: currentAddress.text,
        toAddress: destinationAddress.text,
        price: price.toString(),
        userId: userId.toString(),
        notification_type: 'NEW_ORDER_ALERT'
      },
      token: closestDriver.fcmToken,
    };

    try {
      const response = await driverApp.messaging().send(message);
      console.log('Bildirim gÃ¶nderildi:', response);
    } catch (error) {
      console.error('Bildirim hatasÄ±:', error);
    }

    res.status(201).json({
      message: 'SipariÅŸ kaydedildi ve en yakÄ±n sÃ¼rÃ¼cÃ¼ye bildirildi.',
      requestId: savedRequest._id,
      closestDriverId: closestDriver._id,
      distanceKm: minDistance.toFixed(2),
    });

  } catch (error) {
    console.error('Sunucu hatasÄ±:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ± oluÅŸtu' });
  }
});

router.delete('/request', async (req, res) => {
  try {
    const { requestId } = req.body; // Ä°stek gÃ¶vdesinden sipariÅŸ ID'sini alÄ±rÄ±z
    if (!requestId) {
      return res.status(400).json({ message: 'Taksi isteÄŸi ID eksik.' });
    }

    const deletedRequest = await TaxiRequest.findByIdAndDelete(requestId);
    if (!deletedRequest) {
      return res.status(404).json({ message: 'Silinecek taksi isteÄŸi bulunamadÄ±.' });
    }
    res.sendStatus(204); // BaÅŸarÄ±yla silindi
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Taksi isteÄŸi silinirken bir hata oluÅŸtu.' });
  }
});

router.get('/requests', async (req, res) => {
  try {
    // Sadece isTaken ve isFinished olmayan sipariÅŸleri Ã§ekin
    const requests = await TaxiRequest.find({ isTaken: false, isFinished: false }).sort({ createdAt: -1 });
    res.status(200).json(requests);
  } catch (error) {
    console.error('Taksi istekleri Ã§ekilirken hata:', error);
    res.status(500).json({ message: 'Hata oluÅŸtu' });
  }
});

router.get('/requests/:driverId', async (req, res) => {
  try {
    const requests = await TaxiRequest.find({ driverId: req.params.driverId });
    res.json(requests);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'SipariÅŸler alÄ±nÄ±rken bir hata oluÅŸtu.' });
  }
});

router.post('/updatePrice', async (req, res) => {
  try {
    const { requestId, price, driverId, time } = req.body;

    const driver = await Driver.findById(driverId);
    if (!driver) {
      return res.status(404).json({ message: 'SÃ¼rÃ¼cÃ¼ bulunamadÄ±.' });
    }

    const updatedRequest = await TaxiRequest.findByIdAndUpdate(
      requestId,
      {
        price,
        driverId,
        time,
        driverDetails: {
          id: driver._id,
          firstName: driver.firstName,
          carColor: driver.carColor,
          carModel: driver.carModel,
          carPlate: driver.carPlate,
          phone: driver.phone,
        },

      },
      { new: true }
    );

    if (!updatedRequest) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    res.json({ message: 'Fiyat ve sÃ¼rÃ¼cÃ¼ bilgileri baÅŸarÄ±yla gÃ¼ncellendi.', request: updatedRequest });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Fiyat ve sÃ¼rÃ¼cÃ¼ bilgileri gÃ¼ncellenirken bir hata oluÅŸtu.' });
  }
});

router.get('/updatePrice', async (req, res) => {
  try {
    const { requestId, price, driverId } = req.query;

    const driver = await Driver.findById(driverId);
    if (!driver) {
      return res.status(404).json({ message: 'SÃ¼rÃ¼cÃ¼ bulunamadÄ±.' });
    }

    const updatedRequest = await TaxiRequest.findByIdAndUpdate(
      requestId,
      {
        price,
        driverId,
        driverDetails: {
          id: driver._id,
          firstName: driver.firstName,
          carColor: driver.carColor,
          carModel: driver.carModel,
          carPlate: driver.carPlate,
          phone: driver.phone,
        },
        time
      },
      { new: true }
    );

    if (!updatedRequest) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    res.json({ message: 'Fiyat ve sÃ¼rÃ¼cÃ¼ bilgileri baÅŸarÄ±yla gÃ¼ncellendi.', request: updatedRequest });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Fiyat ve sÃ¼rÃ¼cÃ¼ bilgileri gÃ¼ncellenirken bir hata oluÅŸtu.' });
  }
});

router.get('/requests/visible/:driverId', async (req, res) => {
  try {
    const driverId = req.params.driverId;
    const orders = await TaxiRequest.find({
      visibility: driverId,
      isTaken: false,
      isFinished: false
    });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: 'Sunucu hatasÄ±.' });
  }
});

router.post('/confirm', async (req, res) => {
  try {
    const { requestId } = req.body;

    if (!requestId) {
      return res.status(400).json({ message: 'SipariÅŸ ID eksik.' });
    }

    const updatedRequest = await TaxiRequest.findByIdAndUpdate(
      requestId,
      {
        isConfirmed: true,
        handleConfirmOrder: true
      },
      { new: true }
    );

    if (!updatedRequest) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    res.json({ message: 'SipariÅŸ onaylandÄ±.', request: updatedRequest });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'SipariÅŸ onaylama sÄ±rasÄ±nda bir hata oluÅŸtu.' });
  }
});

router.post('/updateConfirmStatus', async (req, res) => {
  try {
    const { requestId, isConfirmed } = req.body;
    if (!requestId) {
      return res.status(400).json({ message: 'SipariÅŸ ID eksik.' });
    }

    const updatedRequest = await TaxiRequest.findByIdAndUpdate(
      requestId,
      { isConfirmed: isConfirmed },
      { new: true }
    );

    if (!updatedRequest) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    res.json({ message: 'SipariÅŸ durumu gÃ¼ncellendi.', request: updatedRequest });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Bir hata meydana geldi.' });
  }
});

router.get('/order/:requestId', async (req, res) => {
  try {
    const requestId = req.params.requestId;

    const order = await TaxiRequest.findById(requestId);
    if (!order) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    res.json(order);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'SipariÅŸ bilgileri alÄ±nÄ±rken bir hata oluÅŸtu.' });
  }
});

router.post('/takeOrder', async (req, res) => {
  try {
    const { requestId, tel, name, driverId } = req.body;

    if (!requestId || !driverId) {
      return res.status(400).json({ message: 'SipariÅŸ ID veya SÃ¼rÃ¼cÃ¼ ID eksik.' });
    }

    const taxiRequest = await TaxiRequest.findById(requestId);
    if (!taxiRequest) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    if (taxiRequest.isTaken) {
      return res.status(409).json({ message: 'Bu sipariÅŸ zaten alÄ±nmÄ±ÅŸ.' });
    }

    const driver = await Driver.findById(driverId);
    if (!driver) {
      return res.status(404).json({ message: 'SÃ¼rÃ¼cÃ¼ bulunamadÄ±.' });
    }

    // SÃ¼rÃ¼cÃ¼nÃ¼n mevcut konumunu kontrol et
    if (!driver.location || typeof driver.location.lat !== 'number' || typeof driver.location.lan !== 'number') {
      return res.status(400).json({ message: 'SÃ¼rÃ¼cÃ¼nÃ¼n konum bilgisi eksik veya hatalÄ±.' });
    }

    // SipariÅŸin baÅŸlangÄ±Ã§ konumunu kontrol et
    if (!taxiRequest.currentAddress || typeof taxiRequest.currentAddress.latitude !== 'number' || typeof taxiRequest.currentAddress.longitude !== 'number') {
      return res.status(400).json({ message: 'SipariÅŸin baÅŸlangÄ±Ã§ konum bilgisi eksik veya hatalÄ±.' });
    }

    // *** YENÄ° EKLENECEK KISIM: Mesafe KontrolÃ¼ ***
    const driverLat = driver.location.lat;
    const driverLon = driver.location.lan;
    const orderLat = taxiRequest.currentAddress.latitude;
    const orderLon = taxiRequest.currentAddress.longitude;

    const distance = getDistanceFromLatLonInKm(driverLat, driverLon, orderLat, orderLon);
    const maxAllowedDistance = 45; 

    if (distance > maxAllowedDistance) {
      console.log(`SÃ¼rÃ¼cÃ¼ ID: ${driverId} sipariÅŸ ID: ${requestId} iÃ§in Ã§ok uzakta. Mesafe: ${distance.toFixed(2)} km`);
      return res.status(403).json({ message: `SipariÅŸ Ã§ok uzakta (${distance.toFixed(2)} km). Sadece ${maxAllowedDistance * 1000} metre yakÄ±nÄ±ndaki sipariÅŸleri alabilirsiniz.` });
    }
    // *** YENÄ° EKLENECEK KISIM SONU ***

    taxiRequest.isTaken = true;
    taxiRequest.driverId = driverId;
    await taxiRequest.save();

    // MÃ¼ÅŸteriye bildirim gÃ¶nderme (eÄŸer Firebase admin SDK'yÄ± burada kullanÄ±yorsanÄ±z)
    if (taxiRequest.userId) {
      const user = await User.findById(taxiRequest.userId);
      if (user && user.fcmToken) {
        const message = {
          notification: {
            title: 'AloArda',
            body: `SipariÅŸiniz sÃ¼rÃ¼cÃ¼ tarafÄ±ndan alÄ±ndÄ±!`,
          },
          data: {
            requestId: taxiRequest._id.toString(),
            driverId: driverId.toString(),
            notification_type: 'ORDER_TAKEN'
          },
          token: user.fcmToken,
        };
        try {
          await customerApp.messaging().send(message); // customerApp'in tanÄ±mlÄ± olduÄŸundan emin olun
          console.log('MÃ¼ÅŸteriye sipariÅŸin alÄ±ndÄ±ÄŸÄ± bildirimi gÃ¶nderildi.');
        } catch (error) {
          console.error('MÃ¼ÅŸteriye bildirim gÃ¶nderilirken hata:', error);
        }
      }
    }

    res.status(200).json({ message: 'SipariÅŸ baÅŸarÄ±yla alÄ±ndÄ±.', taxiRequest });

  } catch (error) {
    console.error('SipariÅŸ alÄ±nÄ±rken hata:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ± oluÅŸtu.' });
  }
});

router.get('/userRequests/:userId', async (req, res) => {
  try {
    const { userId } = req.params;

    const requests = await TaxiRequest.find({ userId });

    console.log(`KullanÄ±cÄ± ID: ${userId}, SipariÅŸ SayÄ±sÄ±: ${requests.length}`);

    if (requests.length === 0) {
      return res.status(404).json({ message: 'Bu kullanÄ±cÄ±ya ait sipariÅŸ bulunamadÄ±.' });
    }

    res.json(requests);
  } catch (error) {
    console.error('Hata:', error);
    res.status(500).json({ message: 'SipariÅŸler alÄ±nÄ±rken bir hata oluÅŸtu.' });
  }
});

router.get('/my-requests/:userId', async (req, res) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).json({ message: 'KullanÄ±cÄ± ID eksik.' });
    }
    const userRequests = await TaxiRequest.find({ userId });
    res.status(200).json(userRequests);
  } catch (error) {
    console.error('KullanÄ±cÄ± sipariÅŸleri alÄ±nÄ±rken hata:', error);
    res.status(500).json({ message: 'KullanÄ±cÄ± sipariÅŸleri alÄ±nÄ±rken bir hata oluÅŸtu.' });
  }
});

router.post('/addOrderToUser', async (req, res) => {
  const { userId, requestId } = req.body;
  try {
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: 'KullanÄ±cÄ± bulunamadÄ±' });

    user.orders.push({ orderId: requestId });
    await user.save();
    res.json({ message: 'SipariÅŸ kullanÄ±cÄ±ya eklendi' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Hata oluÅŸtu' });
  }
});

router.put('/order/:orderId/complete', async (req, res) => {
  try {
    const orderId = req.params.orderId;

    console.log(`Completing order with ID: ${orderId}`);

    const completedOrder = await TaxiRequest.findByIdAndUpdate(
      orderId,
      { isTaken: false, isFinished: true },
      { new: true }
    );

    if (!completedOrder) {
      console.log(`Order not found with ID: ${orderId}`);
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    console.log('Order successfully completed:', completedOrder);
    res.status(200).json(completedOrder);

  } catch (error) {
    console.error('Error completing order on backend:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±' });
  }
});

router.get('/delete-user-orders-page', (req, res) => {
  res.render('deleteUserOrders');
});

router.post('/delete-user-orders', async (req, res) => {
  const { userId } = req.body;

  try {
    const userOrders = await TaxiRequest.find({ userId });
    if (!userOrders || userOrders.length === 0) {
      return res.send('Bu kullanÄ±cÄ±ya ait sipariÅŸ bulunamadÄ±.');
    }

    await Promise.all(userOrders.map(async (order) => {
      order.isTaken = false;
      order.isFinished = false;
      await order.save();
    }));

    res.send('TÃ¼m sipariÅŸler gÃ¼ncellendi: isTaken=false, isFinished=false.');
  } catch (err) {
    console.error(err);
    res.status(500).send('Hata oluÅŸtu.');
  }
});

router.get('/get-user-orders', async (req, res) => {
  const { userId } = req.query;
  try {
    const orders = await TaxiRequest.find({ userId });
    res.json(orders);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Hata oluÅŸtu' });
  }
});

router.post('/updateOrderStatus', async (req, res) => {
  const { requestId, isTaken, isFinished, isConfirmed } = req.body;
  try {
    const updatedOrder = await TaxiRequest.findByIdAndUpdate(
      requestId,
      { isTaken, isFinished, isConfirmed },
      { new: true }
    );
    if (!updatedOrder) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±' });
    }
    res.json({ message: 'Durum gÃ¼ncellendi', order: updatedOrder });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'GÃ¼ncelleme hatasÄ±' });
  }
});

router.put('/order/:orderId/isTaken', async (req, res) => {
  try {
    const orderId = req.params.orderId;
    const { isTaken, isConfirmed, isFinished } = req.body;

    const updatedOrder = await TaxiRequest.findByIdAndUpdate(
      orderId,
      {
        isTaken: isTaken,
        isConfirmed: isConfirmed,
        isFinished: isFinished
      },
      { new: true }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±' });
    }

    res.status(200).json(updatedOrder);
  } catch (error) {
    console.error('Error updating order status:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±' });
  }
});

router.put('/order/:orderId/setAtAddress', async (req, res) => {
  const { atAddress } = req.body;
  const { orderId } = req.params;

  try {
    const updatedOrder = await TaxiRequest.findByIdAndUpdate(
      orderId,
      { atAddress: atAddress },
      { new: true }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    if (atAddress === true) {
      const user = await User.findById(updatedOrder.userId);

      if (user && user.fcmToken) {
        const message = {
          notification: {
            title: `AloArda - ${updatedOrder.driverDetails ? updatedOrder.driverDetails.carPlate : 'Ã¼nvanda'}`,
            body: `DÉ™yÉ™rli sÉ™rniÅŸinimiz, sÃ¼rÃ¼cÃ¼nÃ¼z "${updatedOrder.driverDetails ? updatedOrder.driverDetails.firstName : ''}" Ã¼nvanda sizi gÃ¶zlÉ™yir.`,
          },
          android: {
            notification: {
              channel_id: 'default_channel_id',
              sound: 'tak_tak_tak',
              priority: 'high',
              visibility: 'public',
            },
          },
          data: {
            requestId: updatedOrder._id.toString(),
            notification_type: 'DRIVER_AT_ADDRESS',
            driverName: updatedOrder.driverDetails ? updatedOrder.driverDetails.firstName : 'SÃ¼rÃ¼cÃ¼',
            carModel: updatedOrder.driverDetails ? updatedOrder.driverDetails.carModel : '',
            carPlate: updatedOrder.driverDetails ? updatedOrder.driverDetails.carPlate : '',
            atAddress: 'true'
          },
          token: user.fcmToken,
        };

        try {
          await customerApp.messaging().send(message); // DEÄžÄ°ÅžÄ°KLÄ°K BURADA
          console.log(`MÃ¼ÅŸteriye (${user.name}) 'SÃ¼rÃ¼cÃ¼ ÃœnvandadÄ±r' bildirimi gÃ¶nderildi.`);
        } catch (notificationError) {
          console.error('MÃ¼ÅŸteriye bildirim gÃ¶nderilirken hata oluÅŸtu:', notificationError);
        }
      } else {
        console.log('SipariÅŸin kullanÄ±cÄ±sÄ± bulunamadÄ± veya FCM tokenÄ± yok. MÃ¼ÅŸteriye bildirim gÃ¶nderilemedi.');
      }
    }
    res.json(updatedOrder);
  } catch (error) {
    console.error('GÃ¼ncellenirken hata oluÅŸtu:', error);
    res.status(500).json({ message: 'GÃ¼ncellenirken hata oluÅŸtu.' });
  }
});

router.post('/customerAccepted', async (req, res) => {
  try {
    const { requestId } = req.body;

    if (!requestId) {
      return res.status(400).json({ message: 'SipariÅŸ ID eksik.' });
    }

    const updatedRequest = await TaxiRequest.findByIdAndUpdate(
      requestId,
      { takenCustomer: true },
      { new: true }
    );

    if (!updatedRequest) {
      return res.status(404).json({ message: 'SipariÅŸ bulunamadÄ±.' });
    }

    res.status(200).json({
      message: 'SipariÅŸin mÃ¼ÅŸteri kabul durumu baÅŸarÄ±yla gÃ¼ncellendi.',
      request: updatedRequest
    });
  } catch (error) {
    console.error('MÃ¼ÅŸteri kabul durumu gÃ¼ncellenirken hata oluÅŸtu:', error);
    res.status(500).json({ message: 'Sunucu hatasÄ±.' });
  }
});

router.delete('/delete-all-requests', async (req, res) => {
  try {
    const result = await TaxiRequest.deleteMany({});
    res.json({ msg: `BÃ¼tÃ¼n ${result.deletedCount} sifariÅŸ uÄŸurla silindi.` });
  } catch (error) {
    console.error('BÃ¼tÃ¼n sifariÅŸlÉ™r silinÉ™rkÉ™n server xÉ™tasÄ±:', error);
    res.status(500).json({ msg: 'Server xÉ™tasÄ±: BÃ¼tÃ¼n sifariÅŸlÉ™r silinÉ™ bilmÉ™di.', error: error.message });
  }
});

router.get('/get-driver-orders', async (req, res) => {
  const { driverId } = req.query;

  if (!driverId) {
    return res.status(400).json({ message: 'SÃ¼rÃ¼cÃ¼ ID eksik.' });
  }

  try {
    const orders = await TaxiRequest.find({ driverId: driverId });

    console.log(`Driver ID: ${driverId}, SipariÅŸ SayÄ±sÄ±: ${orders.length}`);

    if (orders.length === 0) {
      return res.status(404).json({ message: 'Bu sÃ¼rÃ¼cÃ¼yÉ™ aid sifariÅŸ tapÄ±lmadÄ±.' });
    }

    res.json(orders);
  } catch (err) {
    console.error('SÃ¼rÃ¼cÃ¼ sipariÅŸleri alÄ±nÄ±rken hata:', err);
    res.status(500).json({ message: 'SipariÅŸlÉ™r alÄ±narkÉ™n bir xÉ™ta baÅŸ verdi.' });
  }
});

router.get('/orders', async (req, res) => {
  try {
    const canceledOrders = await CanceledOrder.find().populate('userId').lean();
    const reassignedOrders = await ReassignedOrder.find().populate('userId').lean();

    res.render('orders', {
      canceledOrders,
      reassignedOrders
    });
  } catch (error) {
    console.error('[Server] SipariÅŸler getirilirken hata:', error);
    res.status(500).send('Sunucu hatasÄ± oldu.');
  }
});

router.post('/cancel-order', async (req, res) => {
  const { requestId } = req.body;
  console.log(`[Server] LÉ™ÄŸv Et istÉ™yi alÄ±ndÄ±. SifariÅŸ ID: ${requestId}`);

  try {
    const orderToCancel = await TaxiRequest.findById(requestId);
    if (!orderToCancel) {
      console.warn(`[Server] LÉ™ÄŸv edilÉ™cÉ™k sifariÅŸ tapÄ±lmadÄ±. SifariÅŸ ID: ${requestId}`);
      return res.status(404).json({ message: 'SifariÅŸ tapÄ±lmadÄ±.' });
    }

    const canceledOrderData = {
      originalOrderId: orderToCancel._id,
      currentAddress: orderToCancel.currentAddress,
      destinationAddress: orderToCancel.destinationAddress,
      price: orderToCancel.price,
      userId: orderToCancel.userId,
      tel: orderToCancel.tel,
      additionalInfo: orderToCancel.additionalInfo || '',
      reason: 'User Canceled'
    };

    if (orderToCancel.destination2 && orderToCancel.destination2.text) {
      canceledOrderData.destination2 = orderToCancel.destination2;
    }

    if (
      orderToCancel.driverDetails &&
      typeof orderToCancel.driverDetails === 'object' &&
      Object.keys(orderToCancel.driverDetails.toObject ? orderToCancel.driverDetails.toObject() : orderToCancel.driverDetails).length > 0
    ) {
      canceledOrderData.driverDetails = orderToCancel.driverDetails;
    }
    

    const canceledOrder = new CanceledOrder(canceledOrderData);
    await canceledOrder.save();

    await TaxiRequest.findByIdAndDelete(requestId);

    res.status(200).json({ message: 'SifariÅŸ uÄŸurla lÉ™ÄŸv edildi vÉ™ qeydÉ™ alÄ±ndÄ±.' });
  } catch (error) {
    console.error('[Server] SifariÅŸ lÉ™ÄŸv edilÉ™rkÉ™n xÉ™ta baÅŸ verdi:', error);
    res.status(500).json({ message: 'SifariÅŸ lÉ™ÄŸv edilÉ™rkÉ™n bir xÉ™ta baÅŸ verdi.', error: error.message });
  }
});

router.post('/reassign-order', async (req, res) => {
  const { requestId } = req.body;
  console.log(`[Server] ObÅŸiyÉ™ At istÉ™yi alÄ±ndÄ±. SifariÅŸ ID: ${requestId}`);

  try {
    const orderToReassign = await TaxiRequest.findById(requestId);
    if (!orderToReassign) {
      return res.status(404).json({ message: 'SifariÅŸ tapÄ±lmadÄ±.' });
    }

    const reassignedOrderData = {
      originalOrderId: orderToReassign._id,
      currentAddress: orderToReassign.currentAddress,
      destinationAddress: orderToReassign.destinationAddress,
      price: orderToReassign.price,
      userId: orderToReassign.userId,
      tel: orderToReassign.tel,
      additionalInfo: orderToReassign.additionalInfo || ''
    };

    if (orderToReassign.destination2 && orderToReassign.destination2.text) {
      reassignedOrderData.destination2 = orderToReassign.destination2;
    }

    if (orderToReassign.driverDetails) {
      reassignedOrderData.previousDriverDetails = orderToReassign.driverDetails;
    }

    const reassignedOrder = new ReassignedOrder(reassignedOrderData);
    await reassignedOrder.save();

    orderToReassign.isTaken = false;
    orderToReassign.driverId = null;
    orderToReassign.driverDetails = null;
    orderToReassign.time = null;
    orderToReassign.atAddress = false;
    orderToReassign.takenCustomer = false;
    orderToReassign.isConfirmed = false;
    await orderToReassign.save();

    res.status(200).json({ message: 'SifariÅŸ uÄŸurla obÅŸiyÉ™ atÄ±ldÄ± vÉ™ qeydÉ™ alÄ±ndÄ±.' });
  } catch (error) {
    console.error('[Server] SifariÅŸ obÅŸiyÉ™ atÄ±larkÉ™n xÉ™ta baÅŸ verdi:', error);
    res.status(500).json({ message: 'SifariÅŸ obÅŸiyÉ™ atÄ±larkÉ™n bir xÉ™ta baÅŸ verdi.', error: error.message });
  }
});
module.exports = router;